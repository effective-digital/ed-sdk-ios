// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name EffectiveProcessesSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import AVKit
import Combine
import CommonCrypto
import CoreLocation
import CryptoKit
import DeveloperToolsSupport
@_exported import EffectiveProcessesSDK
import Foundation
import IQKeyboardManagerSwift
import JWTDecode
import Kingfisher
import Lottie
import ObjectiveC
import PDFKit
import Photos
import Resolver
import RxCocoa
import RxSwift
import Security
import Speech
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import UserNotifications
import WebKit
import _AVKit_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class APIClient : ObjectiveC.NSObject, Foundation.URLSessionTaskDelegate {
  public static let shared: EffectiveProcessesSDK.APIClient
  public func setSSLPinningDelegate(_ delegate: any EffectiveProcessesSDK.SSLPinningDelegate)
  public func execute<T>(_ from: EffectiveProcessesSDK.Endpoint, tokenRequired: Swift.Bool = true, checkTokenExpired: Swift.Bool = APIConstant.SHOULD_CHECK_TOKEN_EXPIRED, completion: @escaping (EffectiveProcessesSDK.Result<T>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  public func upload<T>(_ from: EffectiveProcessesSDK.Endpoint, progressHandler: ((Swift.Double) -> Swift.Void)?, completion: @escaping (EffectiveProcessesSDK.Result<T>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc deinit
}
extension EffectiveProcessesSDK.APIClient {
  public func executeRawJSON(_ from: EffectiveProcessesSDK.Endpoint, tokenRequired: Swift.Bool = true, checkTokenExpired: Swift.Bool = APIConstant.SHOULD_CHECK_TOKEN_EXPIRED, completion: @escaping (EffectiveProcessesSDK.Result<Swift.String>) -> Swift.Void)
}
public struct APIConstant {
  @available(*, deprecated, message: "Use EPSDK.Configuration.Builder instead")
  public static var BASE_URL: Swift.String {
    get
    set
  }
  @available(*, deprecated, message: "Use EPSDK.Configuration.Builder instead")
  public static var TOKEN: Swift.String
  @available(*, deprecated, message: "Use EPSDK.Configuration.Builder instead")
  public static var APP_UNIQUE_ID: Swift.String
  @available(*, deprecated, message: "Use EPSDK.Configuration.Builder instead")
  public static var SHOULD_CHECK_TOKEN_EXPIRED: Swift.Bool
  @SwiftUI.AppStorage @_projectedValueProperty($LANGUAGE) public static var LANGUAGE: Swift.String {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    _modify
  }
  public static var $LANGUAGE: SwiftUICore.Binding<Swift.String> {
    get
  }
  public static var TOKEN_EXPIRED: Swift.Bool {
    get
  }
}
public struct AnonymousUserRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnonymousUserResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnonymousLoginResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Array {
  public mutating func groupMe<U>(by key: (Element) -> U) -> [[Element]] where U : Swift.Hashable
}
public struct BannerComponentConfiguration<Item> where Item : Swift.Identifiable {
  public var items: [Item]
  public var getData: ((@escaping ([Item]) -> Swift.Void) -> Swift.Void)?
  public var onSelect: (Item) -> Swift.Void
  public var titleProvider: (Item) -> Swift.String
  public var descriptionProvider: (Item) -> Swift.String
  public var imageProvider: (Item) -> Foundation.URL?
  public var showCloseButton: (Item) -> Swift.Bool
  public var alertMessageProvider: (Item) -> Swift.String
  public var alertMessageId: (Item) -> Swift.String
  public var onTerminate: ((_ processId: Swift.String, _ completion: @escaping () -> Swift.Void) -> Swift.Void)?
  public var cardHeight: CoreFoundation.CGFloat
  public init(items: [Item] = [], getData: ((@escaping ([Item]) -> Swift.Void) -> Swift.Void)? = nil, onSelect: @escaping (Item) -> Swift.Void, onTerminate: ((_ processId: Swift.String, _ completion: @escaping () -> Swift.Void) -> Swift.Void)? = nil, titleProvider: @escaping (Item) -> Swift.String, descriptionProvider: @escaping (Item) -> Swift.String, imageProvider: @escaping (Item) -> Foundation.URL?, showCloseButton: @escaping (Item) -> Swift.Bool, alertMessageProvider: @escaping (Item) -> Swift.String, alertMessageId: @escaping (Item) -> Swift.String, cardHeight: CoreFoundation.CGFloat = 210)
}
public class BannerComponentModel<Item> : Combine.ObservableObject where Item : Swift.Identifiable {
  @Combine.Published @_projectedValueProperty($selectedPage) public var selectedPage: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedPage: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($items) public var items: [Item] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $items: Combine.Published<[Item]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLoaded) public var isLoaded: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isLoaded: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(configuration: EffectiveProcessesSDK.BannerComponentConfiguration<Item>)
  public func getData()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct BannerComponent<Item> : SwiftUICore.View where Item : Swift.Identifiable {
  @_Concurrency.MainActor @preconcurrency public init(configuration: EffectiveProcessesSDK.BannerComponentConfiguration<Item>)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK15BannerComponentV4bodyQrvp", 0) __<Item>
}
@_Concurrency.MainActor @preconcurrency public struct BannerComponentView<Item> : SwiftUICore.View where Item : Swift.Identifiable {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK19BannerComponentViewV4bodyQrvp", 0) __<Item>
}
@_Concurrency.MainActor @preconcurrency public struct BannerStateView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, subtitle: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK15BannerStateViewV4bodyQrvp", 0) __
}
public struct BannerComponentFactoryV2 {
  public typealias EmptyCallback = () -> Swift.Void
  public typealias ErrorCallback = (any Swift.Error) -> Swift.Void
  public typealias StateViewProvider = () -> SwiftUICore.AnyView
  public typealias ErrorStateViewProvider = (any Swift.Error) -> SwiftUICore.AnyView
  public static func PresentOffersBanner(for builder: EffectiveProcessesSDK.EPSDK.Configuration, cardHeight: CoreFoundation.CGFloat, onEmpty: EffectiveProcessesSDK.BannerComponentFactoryV2.EmptyCallback? = nil, onError: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorCallback? = nil, emptyStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.StateViewProvider? = nil, errorStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorStateViewProvider? = nil) -> some SwiftUICore.View
  
  public static func PresentUnautherisedOffersBanner(cardHeight: CoreFoundation.CGFloat, onEmpty: EffectiveProcessesSDK.BannerComponentFactoryV2.EmptyCallback? = nil, onError: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorCallback? = nil, emptyStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.StateViewProvider? = nil, errorStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorStateViewProvider? = nil) -> some SwiftUICore.View
  
  public static func PresentOffersBannerView(for builder: EffectiveProcessesSDK.EPSDK.Configuration, cardHeight: CoreFoundation.CGFloat, onEmpty: EffectiveProcessesSDK.BannerComponentFactoryV2.EmptyCallback? = nil, onError: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorCallback? = nil, emptyStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.StateViewProvider? = nil, errorStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorStateViewProvider? = nil) -> UIKit.UIView
  public static func PresentOffersBannerViewController(for builder: EffectiveProcessesSDK.EPSDK.Configuration, cardHeight: CoreFoundation.CGFloat, onEmpty: EffectiveProcessesSDK.BannerComponentFactoryV2.EmptyCallback? = nil, onError: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorCallback? = nil, emptyStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.StateViewProvider? = nil, errorStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorStateViewProvider? = nil) -> UIKit.UIViewController
  public static func PresentUnautherisedOffersBannerView(cardHeight: CoreFoundation.CGFloat, onEmpty: EffectiveProcessesSDK.BannerComponentFactoryV2.EmptyCallback? = nil, onError: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorCallback? = nil, emptyStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.StateViewProvider? = nil, errorStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorStateViewProvider? = nil) -> UIKit.UIView
  public static func PresentUnautherisedOffersBannerViewController(cardHeight: CoreFoundation.CGFloat, onEmpty: EffectiveProcessesSDK.BannerComponentFactoryV2.EmptyCallback? = nil, onError: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorCallback? = nil, emptyStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.StateViewProvider? = nil, errorStateView: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorStateViewProvider? = nil) -> UIKit.UIViewController
}
public class OffersLoaderViewModel : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($hasOffers) public var hasOffers: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $hasOffers: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($offers) public var offers: [EffectiveProcessesSDK.ProcessItemNew] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $offers: Combine.Published<[EffectiveProcessesSDK.ProcessItemNew]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLoading) public var isLoading: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isLoading: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($hasError) public var hasError: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $hasError: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isEmpty) public var isEmpty: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isEmpty: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($sdkError) public var sdkError: (any Swift.Error)? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $sdkError: Combine.Published<(any Swift.Error)?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func loadOffers(onEmpty: EffectiveProcessesSDK.BannerComponentFactoryV2.EmptyCallback? = nil, onError: EffectiveProcessesSDK.BannerComponentFactoryV2.ErrorCallback? = nil)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class BannerOneComponentModel : Foundation.ObservableObject {
  public init(items: [EffectiveProcessesSDK.ProcessItemNew] = [])
  public func getData()
  public func onTerminate(id: Swift.String)
  public func didSelectItem(processId: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct BannerOneComponent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(model: EffectiveProcessesSDK.BannerOneComponentModel, cardHeight: CoreFoundation.CGFloat = 210)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK18BannerOneComponentV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct PageControlBanner : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: EffectiveProcessesSDK.PageControlBanner.Context) -> UIKit.UIPageControl
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: UIKit.UIPageControl, context: EffectiveProcessesSDK.PageControlBanner.Context)
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> EffectiveProcessesSDK.PageControlBanner.Coordinator
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject {
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = UIKit.UIPageControl
}
@_Concurrency.MainActor @preconcurrency public struct BannerCardView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK14BannerCardViewV4bodyQrvp", 0) __
}
public protocol BannerUsecase {
  func getOfferList(callback: @escaping (EffectiveProcessesSDK.Result<[EffectiveProcessesSDK.ProcessItemNew]>) -> Swift.Void)
  func gerListOfAvailableLanguages(callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.Languages>) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BaseScreen : EffectiveProcessesSDK.CTFormsView {
  @_Concurrency.MainActor @preconcurrency public func handleStates(state: RxRelay.BehaviorRelay<EffectiveProcessesSDK.EPState>, completion: @escaping (Any?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension SwiftUICore.Binding where Value == Swift.String {
  public init(_ source: SwiftUICore.Binding<Swift.String?>, replacingNilWith nilProxy: Swift.String)
}
public protocol BoolFieldProvider {
  var boolView: (Swift.String, Swift.String, Swift.String?) -> (EffectiveProcessesSDK.ToggleSwitchFieldModel, UIKit.UIView) { get set }
  var checkboxView: (Swift.String, Swift.String, Swift.String?) -> (EffectiveProcessesSDK.CheckboxBooleanModel, UIKit.UIView) { get set }
}
public struct BottomSheetConfiguration {
  public static let `default`: EffectiveProcessesSDK.BottomSheetConfiguration
  public var dismissRatio: CoreFoundation.CGFloat
  public var maxOverDrag: CoreFoundation.CGFloat
  public var background: SwiftUICore.AnyView
  public var dim: SwiftUICore.AnyView
  public var indicator: SwiftUICore.AnyView
  public init<Background, Dim, Indicator>(dismissRatio: CoreFoundation.CGFloat? = nil, maxOverDrag: CoreFoundation.CGFloat? = nil, background: (() -> Background)? = nil, dim: (() -> Dim)? = nil, indicator: (() -> Indicator)? = nil) where Background : SwiftUICore.View, Dim : SwiftUICore.View, Indicator : SwiftUICore.View
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func bottomSheetConfiguration(_ configuration: EffectiveProcessesSDK.BottomSheetConfiguration) -> some SwiftUICore.View
  
}
public protocol BottomSheetDropdownProvider {
  var bottomSheetDropdownView: (Swift.String, Swift.String, [EffectiveProcessesSDK.Option], Swift.String, Swift.Bool, Swift.String?) -> (EffectiveProcessesSDK.BottomSheetDropdownModel, UIKit.UIView) { get set }
}
open class BottomSheetDropdownModel : EffectiveProcessesSDK.DropDownListModel {
  @Combine.Published @_projectedValueProperty($validationMessage) public var validationMessage: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $validationMessage: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isError) public var isError: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isError: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isDisabled) public var isDisabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isDisabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isMandatory) public var isMandatory: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isMandatory: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($tooltipText) public var tooltipText: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $tooltipText: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var errorMessage: Swift.String
  public init(prompt: Swift.String, options: [EffectiveProcessesSDK.Option], selection: EffectiveProcessesSDK.Option?, isMandatory: Swift.Bool = false, tooltipText: Swift.String? = nil, errorMessage: Swift.String = "")
  public func validateSelection()
  public func setDisabled(_ disabled: Swift.Bool)
  public func setError(_ error: Swift.Bool, message: Swift.String = "")
  public func clearValidation()
  public func reset()
  @objc deinit
}
extension EffectiveProcessesSDK.BottomSheetDropdownModel {
  public func setErrorState(message: Swift.String)
  public func setSuccessState(message: Swift.String)
  public func setDisabledState()
  public func setEnabledState()
  public func updateOptions(_ newOptions: [EffectiveProcessesSDK.Option])
  public func addOption(_ option: EffectiveProcessesSDK.Option)
  public func removeOption(_ option: EffectiveProcessesSDK.Option)
}
@_Concurrency.MainActor @preconcurrency public struct BottomSheetView<Content> : EffectiveProcessesSDK.DismissableView where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var onDismiss: () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public init(configuration: EffectiveProcessesSDK.BottomSheetConfiguration? = nil, onDismiss: @escaping () -> Swift.Void = {
             
             
        }, @SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func dismiss(completion: @escaping () -> Swift.Void = {
         
         
            })
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK15BottomSheetViewV4bodyQrvp", 0) __<Content>
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func bottomSheet<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func bottomSheet<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
public enum FormAlignment {
  case top, center, none
  public static func == (a: EffectiveProcessesSDK.FormAlignment, b: EffectiveProcessesSDK.FormAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class ContentSizeObservingScrollView : UIKit.UIScrollView {
  @_Concurrency.MainActor @preconcurrency public var contentSizeDidChange: ((CoreFoundation.CGSize) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var contentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class CTFormsView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public var scrollView: EffectiveProcessesSDK.ContentSizeObservingScrollView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public let formContainerStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public let buttonsContainerStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency convenience public init(alignment: EffectiveProcessesSDK.FormAlignment = .top)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency public var distanceToBottom: CoreFoundation.CGFloat {
    get
    set
  }
  @objc deinit
}
public struct ImagePickerResult {
  public struct EditingInfo {
    public let image: UIKit.UIImage
    public let crop: CoreFoundation.CGRect
  }
  public let image: UIKit.UIImage?
  public let edits: EffectiveProcessesSDK.ImagePickerResult.EditingInfo?
  public let location: Foundation.URL?
  public let asset: Photos.PHAsset?
}
public class CTImagePicker {
  public init(sourceType: UIKit.UIImagePickerController.SourceType, allowsEditing: Swift.Bool = false)
  @discardableResult
  public func pickImage(over context: UIKit.UIViewController, animated: Swift.Bool, completionHandler: ((EffectiveProcessesSDK.ImagePickerResult?) -> Swift.Void)? = nil) -> EffectiveProcessesSDK.ImagePickerTask
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImagePickerTask {
  public func cancel()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CTListCell<T> : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor @preconcurrency open var item: T!
  @_Concurrency.MainActor @preconcurrency weak open var parentController: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency final public let separatorView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency open func addSeparatorView(leftPadding: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor @preconcurrency open func addSeparatorView(leadingAnchor: UIKit.NSLayoutXAxisAnchor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CTListHeaderView<T, U, H> : UIKit.UIView, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource where T : EffectiveProcessesSDK.CTListCell<U>, H : UIKit.UICollectionReusableView {
  @_Concurrency.MainActor @preconcurrency public var collectionView: UIKit.UICollectionView! {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var source: [U] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public let cellId: Swift.String
  @_Concurrency.MainActor @preconcurrency final public let headerId: Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency public func setupHeader(_ header: H)
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, willDisplaySupplementaryView view: UIKit.UICollectionReusableView, forElementKind elementKind: Swift.String, at indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency convenience public init(scrollDirection: UIKit.UICollectionView.ScrollDirection = .vertical)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CTListView<T, U> : EffectiveProcessesSDK.CTListHeaderView<T, U, UIKit.UICollectionReusableView> where T : EffectiveProcessesSDK.CTListCell<U> {
  @_Concurrency.MainActor @preconcurrency public var items: [U]
  @_Concurrency.MainActor @preconcurrency public func reloadData()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_Concurrency.MainActor @preconcurrency public struct CachedAsyncImage<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1) where Content == SwiftUICore.Image
  @_Concurrency.MainActor @preconcurrency public init(urlRequest: Foundation.URLRequest?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1) where Content == SwiftUICore.Image
  @_Concurrency.MainActor @preconcurrency public init<I, P>(url: Foundation.URL?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Image) -> I, @SwiftUICore.ViewBuilder placeholder: @escaping () -> P) where Content == SwiftUICore._ConditionalContent<I, P>, I : SwiftUICore.View, P : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public init<I, P>(urlRequest: Foundation.URLRequest?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Image) -> I, @SwiftUICore.ViewBuilder placeholder: @escaping () -> P) where Content == SwiftUICore._ConditionalContent<I, P>, I : SwiftUICore.View, P : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1, transaction: SwiftUICore.Transaction = Transaction(), @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.AsyncImagePhase) -> Content)
  @_Concurrency.MainActor @preconcurrency public init(urlRequest: Foundation.URLRequest?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1, transaction: SwiftUICore.Transaction = Transaction(), @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.AsyncImagePhase) -> Content)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK16CachedAsyncImageV4bodyQrvp", 0) __<Content>
}
public struct CellDescriptor {
  public var sectionName: Swift.String
  public let sectionBGColor: UIKit.UIColor
  public let cellClass: UIKit.UITableViewCell.Type
  public let reuseIdentifier: Swift.String
  public let configure: (UIKit.UITableViewCell) -> Swift.Void
  public init<T>(sectionBGColor: UIKit.UIColor, sectionName: Swift.String, configure: @escaping (T) -> Swift.Void) where T : UIKit.UITableViewCell
}
@available(iOS 15.0, *)
@_Concurrency.MainActor @preconcurrency public struct CheckboxBooleanField : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  @_Concurrency.MainActor @preconcurrency public var label: Swift.String
  @SwiftUICore.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.CheckboxBooleanModel {
    get
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.CheckboxBooleanModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var tooltipText: Swift.String?
  @_Concurrency.MainActor @preconcurrency public init(label: Swift.String, model: EffectiveProcessesSDK.CheckboxBooleanModel, tooltipText: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK20CheckboxBooleanFieldV4bodyQrvp", 0) __
  @available(iOS 15.0, *)
  public typealias Model = EffectiveProcessesSDK.CheckboxBooleanModel
}
open class CheckboxBooleanModel : EffectiveProcessesSDK.ViewModelState {
  @Combine.Published @_projectedValueProperty($isChecked) public var isChecked: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $isChecked: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var onToggle: ((Swift.Bool) -> Swift.Void)?
  public init(isChecked: Swift.Bool = false)
  open func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol CheckboxBooleanProvider {
  var checkboxBooleanView: (Swift.String, Swift.String, Swift.String?) -> (EffectiveProcessesSDK.CheckboxBooleanModel, UIKit.UIView) { get set }
}
@available(iOS 15.0, *)
@_Concurrency.MainActor @preconcurrency public struct CheckboxBooleanView : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  @_Concurrency.MainActor @preconcurrency public var label: Swift.String
  @SwiftUICore.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.CheckboxBooleanModel {
    get
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.CheckboxBooleanModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var tooltipText: Swift.String?
  @_Concurrency.MainActor @preconcurrency public init(label: Swift.String, model: EffectiveProcessesSDK.CheckboxBooleanModel, tooltipText: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK19CheckboxBooleanViewV4bodyQrvp", 0) __
  @available(iOS 15.0, *)
  public typealias Model = EffectiveProcessesSDK.CheckboxBooleanModel
}
@objc @_Concurrency.MainActor @preconcurrency open class CircularImageView : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public init(width: CoreFoundation.CGFloat, image: UIKit.UIImage? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.Encodable {
  public var json: [Swift.String : Any]? {
    get
  }
  public var encodeString: Swift.String? {
    get
  }
  public var jsonString: Swift.String? {
    get
  }
}
extension Swift.Encodable {
  public func encoded() throws -> Foundation.Data
}
@available(iOS 15.0, *)
@_Concurrency.MainActor @preconcurrency public struct ConsentCheckboxField : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  @_Concurrency.MainActor @preconcurrency public var label: Swift.String
  @SwiftUICore.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.ConsentCheckboxModel {
    get
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.ConsentCheckboxModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var tooltipText: Swift.String?
  @_Concurrency.MainActor @preconcurrency public init(label: Swift.String, model: EffectiveProcessesSDK.ConsentCheckboxModel, tooltipText: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK20ConsentCheckboxFieldV4bodyQrvp", 0) __
  @available(iOS 15.0, *)
  public typealias Model = EffectiveProcessesSDK.ConsentCheckboxModel
}
public struct ConsentOptionItem : Swift.Identifiable {
  public let id: Swift.String
  public typealias ID = Swift.String
}
public typealias ConsentOptions = [EffectiveProcessesSDK.ConsentOptionItem]
public class ConsentOptionModel : EffectiveProcessesSDK.ViewModelState {
  public func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public init(option: EffectiveProcessesSDK.ConsentOptionItem, multiSelection: SwiftUICore.Binding<Swift.Set<Swift.String>>)
  @Combine.Published @_projectedValueProperty($option) public var option: EffectiveProcessesSDK.ConsentOptionItem {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $option: Combine.Published<EffectiveProcessesSDK.ConsentOptionItem>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @SwiftUICore.Binding @_projectedValueProperty($multiSelection) public var multiSelection: Swift.Set<Swift.String> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $multiSelection: SwiftUICore.Binding<Swift.Set<Swift.String>> {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class ConsentCheckboxModel : EffectiveProcessesSDK.ViewModelState {
  public func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public init(options: EffectiveProcessesSDK.ConsentOptions, body: Swift.String)
  @Combine.Published @_projectedValueProperty($options) public var options: EffectiveProcessesSDK.ConsentOptions {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $options: Combine.Published<EffectiveProcessesSDK.ConsentOptions>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($body) public var body: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $body: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($multiSelection) public var multiSelection: Swift.Set<Swift.String> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $multiSelection: Combine.Published<Swift.Set<Swift.String>>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var checkedItems: Swift.String {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(*, deprecated, message: "Use CurrencyProvider.currencyViewV2")
public protocol CurrencyProvider {
  var currencyView: (Swift.String, Foundation.Date) -> (EffectiveProcessesSDK.DatePickerFieldModel, UIKit.UIView) { get set }
}
extension Foundation.Date {
  public func dateString(ofStyle style: Foundation.DateFormatter.Style = .medium) -> Swift.String
  public func string(withFormat format: Swift.String = "dd/MM/yyyy HH:mm") -> Swift.String
  public func toDateFormat() -> Swift.String?
  public func toNLBDateFormatDash() -> Swift.String?
  public func toDateString(with format: Swift.String) -> Swift.String
  public var toIsoDateString: Swift.String {
    get
  }
}
extension Swift.Double {
  public func formattedString(decimals: Swift.Int = 2) -> Swift.String
  public func rounded(toPlaces places: Swift.Int) -> Swift.Double
  public var isPositive: Swift.Bool {
    get
  }
}
open class DatePickerFieldModel : EffectiveProcessesSDK.ViewModelState {
  @Combine.Published @_projectedValueProperty($tooltipText) public var tooltipText: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $tooltipText: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  open func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public init(selectedDate: Foundation.Date?, minDate: Foundation.Date?, maxDate: Foundation.Date?, defaultValue: Swift.String, tooltipText: Swift.String = "")
  @Combine.Published @_projectedValueProperty($selectedDate) public var selectedDate: Foundation.Date? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedDate: Combine.Published<Foundation.Date?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isError) public var isError: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isError: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($errorMessage) public var errorMessage: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $errorMessage: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isDisabled) public var isDisabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isDisabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($validationMessage) public var validationMessage: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $validationMessage: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var defaultValue: Swift.String
  public var minDate: Foundation.Date
  public var maxDate: Foundation.Date
  public var showPlaceholder: Swift.Bool {
    get
  }
  public func setErrorState(message: Swift.String)
  public func setSuccessState(message: Swift.String)
  public func clearValidation()
  public func setDisabledState()
  public func setEnabledState()
  public func reset()
  public func validateSelection()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(*, deprecated, message: "Use DateProvider.dateViewV2")
public protocol DateProvider {
  var dateView: (Swift.String, Swift.String, Swift.String, Foundation.Date?, Swift.String, Swift.String) -> (EffectiveProcessesSDK.DatePickerFieldModel, UIKit.UIView) { get set }
  var dateViewWithTooltip: (Swift.String, Swift.String, Swift.String, Foundation.Date?, Swift.String, Swift.String, Swift.String?) -> (EffectiveProcessesSDK.DatePickerFieldModel, UIKit.UIView) { get set }
}
public protocol DescriptiveProtocol : AnyObject {
  var descriptor: EffectiveProcessesSDK.CellDescriptor { get }
}
public protocol EPPosition : Swift.Decodable, Swift.Encodable {
  var top: Swift.Int? { get set }
  var bottom: Swift.Int? { get set }
  var left: Swift.Int? { get set }
  var right: Swift.Int? { get set }
  var all: Swift.Int? { get set }
}
public protocol EPSize : Swift.Decodable, Swift.Encodable {
  var height: Swift.Int? { get set }
  var width: Swift.Int? { get set }
}
public struct EPColor : Swift.Codable {
  public var light: Swift.String?
  public var dark: Swift.String?
  public var color: SwiftUICore.Color {
    get
  }
  public var uiColor: UIKit.UIColor {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EPMargine : EffectiveProcessesSDK.EPPosition {
  public var top: Swift.Int?
  public var bottom: Swift.Int?
  public var left: Swift.Int?
  public var right: Swift.Int?
  public var all: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EPPadding : EffectiveProcessesSDK.EPPosition {
  public var top: Swift.Int?
  public var bottom: Swift.Int?
  public var left: Swift.Int?
  public var right: Swift.Int?
  public var all: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EPRadius : EffectiveProcessesSDK.EPPosition {
  public var top: Swift.Int?
  public var bottom: Swift.Int?
  public var left: Swift.Int?
  public var right: Swift.Int?
  public var all: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol SizeStyle : EffectiveProcessesSDK.EPSize {
  var margine: EffectiveProcessesSDK.EPMargine? { get set }
  var padding: EffectiveProcessesSDK.EPPadding? { get set }
  var cornerRadius: EffectiveProcessesSDK.EPRadius? { get set }
}
public struct GeneralStyle : EffectiveProcessesSDK.ColorStyle, EffectiveProcessesSDK.SizeStyle {
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LabelStyleNew : EffectiveProcessesSDK.UIStyleGeneral {
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public var textAlighment: Swift.String?
  public var numberOfLines: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IconStyleNew : EffectiveProcessesSDK.UIStyleGeneral {
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UIStyleGeneral : EffectiveProcessesSDK.ColorStyle, EffectiveProcessesSDK.SizeStyle {
}
public protocol UISubElements : EffectiveProcessesSDK.ColorStyle, EffectiveProcessesSDK.SizeStyle {
  var labelStyle: EffectiveProcessesSDK.LabelStyleNew? { get set }
  var iconStyle: EffectiveProcessesSDK.IconStyleNew? { get set }
}
public struct InputStyle : EffectiveProcessesSDK.UISubElements {
  public var labelStyle: EffectiveProcessesSDK.LabelStyleNew?
  public var iconStyle: EffectiveProcessesSDK.IconStyleNew?
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public var type: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardStyleNew : EffectiveProcessesSDK.UISubElements {
  public var labelStyle: EffectiveProcessesSDK.LabelStyleNew?
  public var iconStyle: EffectiveProcessesSDK.IconStyleNew?
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct HeaderStyle : EffectiveProcessesSDK.UISubElements {
  public var labelStyle: EffectiveProcessesSDK.LabelStyleNew?
  public var iconStyle: EffectiveProcessesSDK.IconStyleNew?
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ButtonStyle : EffectiveProcessesSDK.UIStyleGeneral {
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public var axis: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DetailStyle : EffectiveProcessesSDK.UIStyleGeneral {
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LabelTheStyle : EffectiveProcessesSDK.UIStyleGeneral {
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EDSliderStyle : EffectiveProcessesSDK.UISubElements {
  public var labelStyle: EffectiveProcessesSDK.LabelStyleNew?
  public var iconStyle: EffectiveProcessesSDK.IconStyleNew?
  public var height: Swift.Int?
  public var width: Swift.Int?
  public var cornerRadius: EffectiveProcessesSDK.EPRadius?
  public var margine: EffectiveProcessesSDK.EPMargine?
  public var padding: EffectiveProcessesSDK.EPPadding?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public var type: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class EPStyle : EffectiveProcessesSDK.ColorStyle, EffectiveProcessesSDK.ElementStyle {
  public var labelStyle: EffectiveProcessesSDK.LabelTheStyle?
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public var inputStyle: EffectiveProcessesSDK.InputStyle?
  public var cardStyle: EffectiveProcessesSDK.CardStyleNew?
  public var headerStyle: EffectiveProcessesSDK.HeaderStyle?
  public var buttonStyle: EffectiveProcessesSDK.ButtonStyle?
  public var detailStyle: EffectiveProcessesSDK.DetailStyle?
  public var slider: EffectiveProcessesSDK.EDSliderStyle?
  public init(labelStyle: EffectiveProcessesSDK.LabelTheStyle?, tertiaryColor: EffectiveProcessesSDK.EPColor?, primaryColor: EffectiveProcessesSDK.EPColor?, secondaryColor: EffectiveProcessesSDK.EPColor?, primaryFont: Swift.String?, secondaryFont: Swift.String?, inputStyle: EffectiveProcessesSDK.InputStyle? = nil, cardStyle: EffectiveProcessesSDK.CardStyleNew?, headerStyle: EffectiveProcessesSDK.HeaderStyle?, buttonStyle: EffectiveProcessesSDK.ButtonStyle?, detailStyle: EffectiveProcessesSDK.DetailStyle?, slider: EffectiveProcessesSDK.EDSliderStyle?)
  public static var empty: EffectiveProcessesSDK.EPStyle {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol ColorStyle : Swift.Decodable, Swift.Encodable {
  var primaryColor: EffectiveProcessesSDK.EPColor? { get set }
  var secondaryColor: EffectiveProcessesSDK.EPColor? { get set }
  var tertiaryColor: EffectiveProcessesSDK.EPColor? { get set }
  var primaryFont: Swift.String? { get set }
  var secondaryFont: Swift.String? { get set }
}
public protocol ElementStyle {
  var labelStyle: EffectiveProcessesSDK.LabelTheStyle? { get set }
  var inputStyle: EffectiveProcessesSDK.InputStyle? { get set }
  var cardStyle: EffectiveProcessesSDK.CardStyleNew? { get set }
  var headerStyle: EffectiveProcessesSDK.HeaderStyle? { get set }
  var buttonStyle: EffectiveProcessesSDK.ButtonStyle? { get set }
}
@_hasMissingDesignatedInitializers public class EPStyleMasterV1 : EffectiveProcessesSDK.ColorStyle, EffectiveProcessesSDK.ElementStyle {
  public var labelStyle: EffectiveProcessesSDK.LabelTheStyle?
  public var tertiaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryColor: EffectiveProcessesSDK.EPColor?
  public var secondaryColor: EffectiveProcessesSDK.EPColor?
  public var primaryFont: Swift.String?
  public var secondaryFont: Swift.String?
  public var inputStyle: EffectiveProcessesSDK.InputStyle?
  public var cardStyle: EffectiveProcessesSDK.CardStyleNew?
  public var headerStyle: EffectiveProcessesSDK.HeaderStyle?
  public var buttonStyle: EffectiveProcessesSDK.ButtonStyle?
  public var detailStyle: EffectiveProcessesSDK.DetailStyle?
  public var slider: EffectiveProcessesSDK.EDSliderStyle?
  public var components: EffectiveProcessesSDK.Components?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class EPStyleV2 : Swift.Codable {
  public var components: EffectiveProcessesSDK.Components?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class EPStyleOnlyInputView : Swift.Codable {
  public var components: EffectiveProcessesSDK.ComponentsOnlyInputView?
  public static var empty: EffectiveProcessesSDK.EPStyleOnlyInputView {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension EffectiveProcessesSDK.ComponentsOnlyInputView {
  public static var empty: EffectiveProcessesSDK.ComponentsOnlyInputView {
    get
  }
}
extension EffectiveProcessesSDK.UIComponentsOnlyInputView {
  public static var empty: EffectiveProcessesSDK.UIComponentsOnlyInputView {
    get
  }
}
extension EffectiveProcessesSDK.UIComponentsOnlyInputView {
  public init(from components: EffectiveProcessesSDK.Components?)
}
extension EffectiveProcessesSDK.Components {
  public func mapToOnlyInputView() -> EffectiveProcessesSDK.ComponentsOnlyInputView
}
extension EffectiveProcessesSDK.EPStyleMasterV1 {
  public func mapOnlyInputView() -> EffectiveProcessesSDK.EPStyleOnlyInputView
}
extension EffectiveProcessesSDK.EPStyleMasterV1 {
  public func mapV2() -> EffectiveProcessesSDK.EPStyleV2
  public func mapV1() -> EffectiveProcessesSDK.EPStyle
}
extension EffectiveProcessesSDK.ConsentCheckbox {
  public static var empty: EffectiveProcessesSDK.ConsentCheckbox {
    get
  }
}
extension EffectiveProcessesSDK.ConsentOptionsCard {
  public static var empty: EffectiveProcessesSDK.ConsentOptionsCard {
    get
  }
}
extension EffectiveProcessesSDK.ConsentOption {
  public static var empty: EffectiveProcessesSDK.ConsentOption {
    get
  }
}
extension EffectiveProcessesSDK.ConsentLabelState {
  public static var empty: EffectiveProcessesSDK.ConsentLabelState {
    get
  }
}
extension EffectiveProcessesSDK.ConsentIndicatorState {
  public static var empty: EffectiveProcessesSDK.ConsentIndicatorState {
    get
  }
}
extension EffectiveProcessesSDK.ConsentIndicatorProperties {
  public static var empty: EffectiveProcessesSDK.ConsentIndicatorProperties {
    get
  }
}
extension EffectiveProcessesSDK.TextBlock {
  public static var empty: EffectiveProcessesSDK.TextBlock {
    get
  }
}
extension EffectiveProcessesSDK.InputFieldComponent {
  public static var empty: EffectiveProcessesSDK.InputFieldComponent {
    get
  }
}
extension EffectiveProcessesSDK.InputLabelStates {
  public static var empty: EffectiveProcessesSDK.InputLabelStates {
    get
  }
}
extension EffectiveProcessesSDK.InputBoxStates {
  public static var empty: EffectiveProcessesSDK.InputBoxStates {
    get
  }
}
extension EffectiveProcessesSDK.InputBoxState {
  public static var empty: EffectiveProcessesSDK.InputBoxState {
    get
  }
}
extension EffectiveProcessesSDK.InputFeedbackArea {
  public static var empty: EffectiveProcessesSDK.InputFeedbackArea {
    get
  }
}
extension EffectiveProcessesSDK.InputFeedbackStates {
  public static var empty: EffectiveProcessesSDK.InputFeedbackStates {
    get
  }
}
extension EffectiveProcessesSDK.InputFeedbackState {
  public static var empty: EffectiveProcessesSDK.InputFeedbackState {
    get
  }
}
extension EffectiveProcessesSDK.InputAssistiveText {
  public static var empty: EffectiveProcessesSDK.InputAssistiveText {
    get
  }
}
extension EffectiveProcessesSDK.AssistiveTextState {
  public static var empty: EffectiveProcessesSDK.AssistiveTextState {
    get
  }
}
public class EPStyleInput : Swift.Codable {
  final public let components: EffectiveProcessesSDK.ComponentsInput?
  public init(components: EffectiveProcessesSDK.ComponentsInput?)
  public static var empty: EffectiveProcessesSDK.EPStyleInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class ComponentsInput : Swift.Codable {
  final public let uiComponents: EffectiveProcessesSDK.UIComponentsInput?
  public init(uiComponents: EffectiveProcessesSDK.UIComponentsInput?)
  public static var empty: EffectiveProcessesSDK.ComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class UIComponentsInput : Swift.Codable {
  public var inputField: EffectiveProcessesSDK.InputFieldComponent?
  public init(inputField: EffectiveProcessesSDK.InputFieldComponent?)
  public static var empty: EffectiveProcessesSDK.UIComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class EPStyleSlider : Swift.Codable {
  final public let components: EffectiveProcessesSDK.SliderComponentsInput?
  public init(components: EffectiveProcessesSDK.SliderComponentsInput?)
  public static var empty: EffectiveProcessesSDK.EPStyleSlider {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class SliderComponentsInput : Swift.Codable {
  final public let uiComponents: EffectiveProcessesSDK.SliderUIComponentsInput?
  public init(uiComponents: EffectiveProcessesSDK.SliderUIComponentsInput?)
  public static var empty: EffectiveProcessesSDK.SliderComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class SliderUIComponentsInput : Swift.Codable {
  public var slider: EffectiveProcessesSDK.SliderComponent?
  public init(slider: EffectiveProcessesSDK.SliderComponent?)
  public static var empty: EffectiveProcessesSDK.SliderUIComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class SliderComponent : Swift.Codable {
  final public let label: EffectiveProcessesSDK.InputLabelStates?
  final public let inputBox: EffectiveProcessesSDK.InputBoxStates?
  final public let sliderControl: EffectiveProcessesSDK.SliderControlStates?
  final public let tooltipIcon: EffectiveProcessesSDK.TooltipIcon?
  public init(label: EffectiveProcessesSDK.InputLabelStates?, inputBox: EffectiveProcessesSDK.InputBoxStates?, sliderControl: EffectiveProcessesSDK.SliderControlStates?, tooltipIcon: EffectiveProcessesSDK.TooltipIcon?)
  public static var empty: EffectiveProcessesSDK.SliderComponent {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class SliderControlStates : Swift.Codable {
  public var defaultState: EffectiveProcessesSDK.SliderState?
  public var focusedState: EffectiveProcessesSDK.SliderState?
  public var errorState: EffectiveProcessesSDK.SliderState?
  public var disabledState: EffectiveProcessesSDK.SliderState?
  public init(defaultState: EffectiveProcessesSDK.SliderState? = nil, focusedState: EffectiveProcessesSDK.SliderState? = nil, errorState: EffectiveProcessesSDK.SliderState? = nil, disabledState: EffectiveProcessesSDK.SliderState? = nil)
  public static var empty: EffectiveProcessesSDK.SliderControlStates {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class SliderState : Swift.Codable {
  public var thumb: EffectiveProcessesSDK.Thumb?
  public var track: EffectiveProcessesSDK.Track?
  public var currentValue: EffectiveProcessesSDK.ValueDisplay?
  public var minValue: EffectiveProcessesSDK.ValueDisplay?
  public var maxValue: EffectiveProcessesSDK.ValueDisplay?
  public init(thumb: EffectiveProcessesSDK.Thumb? = nil, track: EffectiveProcessesSDK.Track? = nil, currentValue: EffectiveProcessesSDK.ValueDisplay? = nil, minValue: EffectiveProcessesSDK.ValueDisplay? = nil, maxValue: EffectiveProcessesSDK.ValueDisplay? = nil)
  public static var empty: EffectiveProcessesSDK.SliderState {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Thumb : Swift.Codable {
  public var backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public var border: EffectiveProcessesSDK.Border?
  public init(backgroundColor: EffectiveProcessesSDK.PlatformAppearance? = nil, border: EffectiveProcessesSDK.Border? = nil)
  public static var empty: EffectiveProcessesSDK.Thumb {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Track : Swift.Codable {
  public var filledPart: EffectiveProcessesSDK.BackgroundColorWrapper?
  public var unfilledPart: EffectiveProcessesSDK.BackgroundColorWrapper?
  public var border: EffectiveProcessesSDK.Border?
  public init(filledPart: EffectiveProcessesSDK.BackgroundColorWrapper? = nil, unfilledPart: EffectiveProcessesSDK.BackgroundColorWrapper? = nil, border: EffectiveProcessesSDK.Border? = nil)
  public static var empty: EffectiveProcessesSDK.Track {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BackgroundColorWrapper : Swift.Codable {
  public var backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public init(backgroundColor: EffectiveProcessesSDK.PlatformAppearance? = nil)
  public static var empty: EffectiveProcessesSDK.BackgroundColorWrapper {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class ValueDisplay : Swift.Codable {
  public var text: EffectiveProcessesSDK.TextStyles?
  public var backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public var padding: EffectiveProcessesSDK.Margins?
  public var margin: EffectiveProcessesSDK.Margins?
  public init(text: EffectiveProcessesSDK.TextStyles? = nil, backgroundColor: EffectiveProcessesSDK.PlatformAppearance? = nil, padding: EffectiveProcessesSDK.Margins? = nil, margin: EffectiveProcessesSDK.Margins? = nil)
  public static var empty: EffectiveProcessesSDK.ValueDisplay {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class TooltipIcon : Swift.Codable {
  final public let color: EffectiveProcessesSDK.PlatformAppearance?
  final public let size: EffectiveProcessesSDK.SizeValues?
  final public let margin: EffectiveProcessesSDK.Margins?
  public init(color: EffectiveProcessesSDK.PlatformAppearance?, size: EffectiveProcessesSDK.SizeValues?, margin: EffectiveProcessesSDK.Margins?)
  public static var empty: EffectiveProcessesSDK.TooltipIcon {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class TooltipSize : Swift.Codable {
  final public let width: Swift.String?
  final public let height: Swift.String?
  public init(width: Swift.String?, height: Swift.String?)
  public static var empty: EffectiveProcessesSDK.TooltipSize {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct Components : Swift.Codable {
  public let form: EffectiveProcessesSDK.Form
  public let card: EffectiveProcessesSDK.Card
  public let uiComponents: EffectiveProcessesSDK.UIComponents?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Card : Swift.Codable {
  public let title: EffectiveProcessesSDK.TextProperties?
  public let description: EffectiveProcessesSDK.TextProperties?
  public let terminateButton: EffectiveProcessesSDK.TerminateButton?
  public let padding: EffectiveProcessesSDK.Margins?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let carousel: EffectiveProcessesSDK.Carousel
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Header : Swift.Codable {
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance
  public let text: EffectiveProcessesSDK.TextStyles
  public let terminateButton: EffectiveProcessesSDK.ButtonProperties
  public let margin: EffectiveProcessesSDK.Margins
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TextProperties : Swift.Codable {
  public let text: EffectiveProcessesSDK.TextStyles
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TextStyles : Swift.Codable {
  public let weight: EffectiveProcessesSDK.PlatformValues?
  public let size: EffectiveProcessesSDK.PlatformValues?
  public let alignment: EffectiveProcessesSDK.PlatformValues?
  public let lineLimit: EffectiveProcessesSDK.PlatformValues?
  public let color: EffectiveProcessesSDK.PlatformAppearance?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TerminateButton : Swift.Codable {
  public let width: EffectiveProcessesSDK.PlatformValues
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Form : Swift.Codable {
  public let header: EffectiveProcessesSDK.Header
  public let image: EffectiveProcessesSDK.FormImage
  public let body: EffectiveProcessesSDK.Body
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FormImage : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ButtonProperties : Swift.Codable {
  public let color: EffectiveProcessesSDK.PlatformAppearance
  public let width: EffectiveProcessesSDK.PlatformValues?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension EffectiveProcessesSDK.PlatformAppearance {
  public var uiColor: UIKit.UIColor {
    get
  }
  public var color: SwiftUICore.Color {
    get
  }
}
public struct Margins : Swift.Codable {
  public let top: EffectiveProcessesSDK.PlatformValues
  public let bottom: EffectiveProcessesSDK.PlatformValues
  public let left: EffectiveProcessesSDK.PlatformValues
  public let right: EffectiveProcessesSDK.PlatformValues
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension EffectiveProcessesSDK.PlatformValues {
  public var margineValue: CoreFoundation.CGFloat {
    get
  }
}
public struct CornerRadius : Swift.Codable {
  public let topLeft: EffectiveProcessesSDK.PlatformValues
  public let topRight: EffectiveProcessesSDK.PlatformValues
  public let bottomLeft: EffectiveProcessesSDK.PlatformValues
  public let bottomRight: EffectiveProcessesSDK.PlatformValues
  public let all: EffectiveProcessesSDK.PlatformValues?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Carousel : Swift.Codable {
  public let indicator: EffectiveProcessesSDK.Indicator
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Indicator : Swift.Codable {
  public let color: EffectiveProcessesSDK.PlatformAppearance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlatformAppearance : Swift.Codable {
  public let web: EffectiveProcessesSDK.AppearanceValues
  public let android: EffectiveProcessesSDK.AppearanceValues
  public let ios: EffectiveProcessesSDK.AppearanceValues
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppearanceValues : Swift.Codable {
  public let lightAppearance: Swift.String?
  public let darkAppearance: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlatformValues : Swift.Codable {
  public let web: Swift.String?
  public let android: Swift.String?
  public let ios: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Body : Swift.Codable {
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let border: EffectiveProcessesSDK.Border?
  public let text: EffectiveProcessesSDK.TextStyles?
  public let padding: EffectiveProcessesSDK.Margins?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let transitionButtons: EffectiveProcessesSDK.TransitionButtons?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Border : Swift.Codable {
  public let top: EffectiveProcessesSDK.BorderProperties?
  public let right: EffectiveProcessesSDK.BorderProperties?
  public let bottom: EffectiveProcessesSDK.BorderProperties?
  public let left: EffectiveProcessesSDK.BorderProperties?
  public let all: EffectiveProcessesSDK.BorderProperties?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BorderProperties : Swift.Codable {
  public let color: EffectiveProcessesSDK.PlatformAppearance?
  public let width: EffectiveProcessesSDK.PlatformValues?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransitionButtons : Swift.Codable {
  public let layout: EffectiveProcessesSDK.PlatformValues?
  public let primaryButton: EffectiveProcessesSDK.ButtonStates?
  public let secondaryButton: EffectiveProcessesSDK.ButtonStates?
  public let tertiaryButton: EffectiveProcessesSDK.ButtonStates?
  public let height: EffectiveProcessesSDK.PlatformValues?
  public let padding: EffectiveProcessesSDK.Margins?
  public let alpha: EffectiveProcessesSDK.PlatformValues?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension EffectiveProcessesSDK.PlatformValues {
  public var direction: EffectiveProcessesSDK.EDLayout {
    get
  }
}
public struct ButtonStates : Swift.Codable {
  public let defaultState: EffectiveProcessesSDK.ButtonState?
  public let disabledState: EffectiveProcessesSDK.ButtonState?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ButtonState : Swift.Codable {
  public let border: EffectiveProcessesSDK.Border?
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let text: EffectiveProcessesSDK.TextStyles?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let padding: EffectiveProcessesSDK.Margins?
  public let margin: EffectiveProcessesSDK.Margins?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UIComponents : Swift.Codable {
  public let summaryCard: EffectiveProcessesSDK.SummaryCard?
  public let toggleSwitch: EffectiveProcessesSDK.ToggleSwitchComponent?
  public var radioButtonFk: EffectiveProcessesSDK.RadioButtonFk?
  public var multiSelectCheckbox: EffectiveProcessesSDK.MultiSelectCheckbox?
  public var consentCheckbox: EffectiveProcessesSDK.ConsentCheckbox?
  public var bottomSheetDropdown: EffectiveProcessesSDK.BottomSheetDropdownComponent?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ComponentsOnlyInputView : Swift.Codable {
  public let uiComponents: EffectiveProcessesSDK.UIComponentsOnlyInputView?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UIComponentsOnlyInputView : Swift.Codable {
  public var inputField: EffectiveProcessesSDK.InputFieldComponent?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SummaryCard : Swift.Codable {
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let border: EffectiveProcessesSDK.Border
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius
  public let padding: EffectiveProcessesSDK.Margins?
  public let margin: EffectiveProcessesSDK.Margins?
  public let sections: EffectiveProcessesSDK.SummaryCardSections?
  public let errorMessage: EffectiveProcessesSDK.SummaryCardErrorMessage?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SummaryCardSections : Swift.Codable {
  public let key: EffectiveProcessesSDK.SummaryCardSectionStyle?
  public let value: EffectiveProcessesSDK.SummaryCardSectionStyle?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SummaryCardSectionStyle : Swift.Codable {
  public let text: EffectiveProcessesSDK.TextStyles?
  public let margin: EffectiveProcessesSDK.Margins?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SummaryCardErrorMessage : Swift.Codable {
  public let text: EffectiveProcessesSDK.TextStyles?
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let border: EffectiveProcessesSDK.Border?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let padding: EffectiveProcessesSDK.Margins?
  public let margin: EffectiveProcessesSDK.Margins?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ToggleSwitchComponent : Swift.Codable {
  public let label: EffectiveProcessesSDK.ToggleSwitchLabel?
  public let `switch`: EffectiveProcessesSDK.ToggleSwitchStates?
  public let margin: EffectiveProcessesSDK.Margins?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ToggleSwitchLabel : Swift.Codable {
  public let activeState: EffectiveProcessesSDK.LabelState
  public let inactiveState: EffectiveProcessesSDK.LabelState
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ToggleSwitchStates : Swift.Codable {
  public let activeState: EffectiveProcessesSDK.ToggleSwitchState
  public let inactiveState: EffectiveProcessesSDK.ToggleSwitchState
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ToggleSwitchState : Swift.Codable {
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let thumb: EffectiveProcessesSDK.ToggleThumb?
  public let border: EffectiveProcessesSDK.Border?
  public let margin: EffectiveProcessesSDK.Margins?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LabelState : Swift.Codable {
  public let text: EffectiveProcessesSDK.TextStyles
  public let margin: EffectiveProcessesSDK.Margins
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ToggleThumb : Swift.Codable {
  public let color: EffectiveProcessesSDK.PlatformAppearance?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RadioButtonFk : Swift.Codable {
  public var label: EffectiveProcessesSDK.RadioButtonLabelState?
  public var tooltipIcon: EffectiveProcessesSDK.TooltipIcon?
  public var radioOptionsCard: EffectiveProcessesSDK.RadioOptionsCard?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RadioButtonLabelState : Swift.Codable {
  public var defaultState: EffectiveProcessesSDK.TextBlock?
  public var activeState: EffectiveProcessesSDK.TextBlock?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class TextBlock : Swift.Codable {
  public var text: EffectiveProcessesSDK.TextStyles?
  public var margin: EffectiveProcessesSDK.Margins?
  public init(text: EffectiveProcessesSDK.TextStyles? = nil, margin: EffectiveProcessesSDK.Margins? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct RadioOptionsCard : Swift.Codable {
  public var backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public var border: EffectiveProcessesSDK.Border?
  public var cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public var padding: EffectiveProcessesSDK.Margins?
  public var margin: EffectiveProcessesSDK.Margins?
  public var divider: EffectiveProcessesSDK.BorderProperties?
  public var radioOption: EffectiveProcessesSDK.RadioOption?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RadioOption : Swift.Codable {
  public var label: EffectiveProcessesSDK.RadioOptionLabelState?
  public var indicator: EffectiveProcessesSDK.RadioOptionIndicatorState?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RadioOptionLabelState : Swift.Codable {
  public var defaultState: EffectiveProcessesSDK.TextBlock?
  public var activeState: EffectiveProcessesSDK.TextBlock?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RadioOptionIndicatorState : Swift.Codable {
  public var position: EffectiveProcessesSDK.PlatformValues?
  public var defaultState: EffectiveProcessesSDK.RadioIndicatorState?
  public var activeState: EffectiveProcessesSDK.RadioIndicatorState?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RadioIndicatorState : Swift.Codable {
  public var size: EffectiveProcessesSDK.PlatformValues?
  public var color: EffectiveProcessesSDK.PlatformAppearance?
  public var margin: EffectiveProcessesSDK.Margins?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiSelectCheckbox : Swift.Codable {
  public var label: EffectiveProcessesSDK.MultiSelectCheckboxLabelState?
  public var multiSelectOptionsCard: EffectiveProcessesSDK.MultiSelectOptionsCard?
  public var tooltipIcon: EffectiveProcessesSDK.TooltipIcon?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiSelectCheckboxLabelState : Swift.Codable {
  public var defaultState: EffectiveProcessesSDK.TextBlock?
  public var activeState: EffectiveProcessesSDK.TextBlock?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiSelectOptionsCard : Swift.Codable {
  public var backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public var border: EffectiveProcessesSDK.Border?
  public var cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public var padding: EffectiveProcessesSDK.Margins?
  public var margin: EffectiveProcessesSDK.Margins?
  public var divider: EffectiveProcessesSDK.BorderProperties?
  public var multiSelectOption: EffectiveProcessesSDK.MultiSelectOption?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiSelectOption : Swift.Codable {
  public var label: EffectiveProcessesSDK.MultiSelectLabelState?
  public var indicator: EffectiveProcessesSDK.MultiSelectIndicatorState?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiSelectLabelState : Swift.Codable {
  public var defaultState: EffectiveProcessesSDK.TextBlock?
  public var activeState: EffectiveProcessesSDK.TextBlock?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiSelectIndicatorState : Swift.Codable {
  public var position: EffectiveProcessesSDK.PlatformValues?
  public var defaultState: EffectiveProcessesSDK.MultiSelectIndicatorProperties?
  public var activeState: EffectiveProcessesSDK.MultiSelectIndicatorProperties?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiSelectIndicatorProperties : Swift.Codable {
  public var size: EffectiveProcessesSDK.PlatformValues?
  public var color: EffectiveProcessesSDK.PlatformAppearance?
  public var margin: EffectiveProcessesSDK.Margins?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension EffectiveProcessesSDK.RadioButtonFk {
  public static var empty: EffectiveProcessesSDK.RadioButtonFk {
    get
  }
}
extension EffectiveProcessesSDK.RadioButtonLabelState {
  public static var empty: EffectiveProcessesSDK.RadioButtonLabelState {
    get
  }
}
extension EffectiveProcessesSDK.RadioOptionsCard {
  public static var empty: EffectiveProcessesSDK.RadioOptionsCard {
    get
  }
}
extension EffectiveProcessesSDK.RadioOption {
  public static var empty: EffectiveProcessesSDK.RadioOption {
    get
  }
}
extension EffectiveProcessesSDK.RadioOptionLabelState {
  public static var empty: EffectiveProcessesSDK.RadioOptionLabelState {
    get
  }
}
extension EffectiveProcessesSDK.RadioOptionIndicatorState {
  public static var empty: EffectiveProcessesSDK.RadioOptionIndicatorState {
    get
  }
}
extension EffectiveProcessesSDK.RadioIndicatorState {
  public static var empty: EffectiveProcessesSDK.RadioIndicatorState {
    get
  }
}
extension EffectiveProcessesSDK.MultiSelectCheckbox {
  public static var empty: EffectiveProcessesSDK.MultiSelectCheckbox {
    get
  }
}
extension EffectiveProcessesSDK.MultiSelectCheckboxLabelState {
  public static var empty: EffectiveProcessesSDK.MultiSelectCheckboxLabelState {
    get
  }
}
extension EffectiveProcessesSDK.MultiSelectOptionsCard {
  public static var empty: EffectiveProcessesSDK.MultiSelectOptionsCard {
    get
  }
}
extension EffectiveProcessesSDK.MultiSelectOption {
  public static var empty: EffectiveProcessesSDK.MultiSelectOption {
    get
  }
}
extension EffectiveProcessesSDK.MultiSelectLabelState {
  public static var empty: EffectiveProcessesSDK.MultiSelectLabelState {
    get
  }
}
extension EffectiveProcessesSDK.MultiSelectIndicatorState {
  public static var empty: EffectiveProcessesSDK.MultiSelectIndicatorState {
    get
  }
}
extension EffectiveProcessesSDK.MultiSelectIndicatorProperties {
  public static var empty: EffectiveProcessesSDK.MultiSelectIndicatorProperties {
    get
  }
}
public struct ConsentCheckbox : Swift.Codable {
  public var consentOptionsCard: EffectiveProcessesSDK.ConsentOptionsCard?
  public var tooltipIcon: EffectiveProcessesSDK.TooltipIcon?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConsentOptionsCard : Swift.Codable {
  public var backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public var border: EffectiveProcessesSDK.Border?
  public var cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public var padding: EffectiveProcessesSDK.Margins?
  public var margin: EffectiveProcessesSDK.Margins?
  public var divider: EffectiveProcessesSDK.BorderProperties?
  public var consentOption: EffectiveProcessesSDK.ConsentOption?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConsentOption : Swift.Codable {
  public var label: EffectiveProcessesSDK.ConsentLabelState?
  public var indicator: EffectiveProcessesSDK.ConsentIndicatorState?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConsentLabelState : Swift.Codable {
  public var defaultState: EffectiveProcessesSDK.TextBlock?
  public var activeState: EffectiveProcessesSDK.TextBlock?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConsentIndicatorState : Swift.Codable {
  public var position: EffectiveProcessesSDK.PlatformValues?
  public var defaultState: EffectiveProcessesSDK.ConsentIndicatorProperties?
  public var activeState: EffectiveProcessesSDK.ConsentIndicatorProperties?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConsentIndicatorProperties : Swift.Codable {
  public var size: EffectiveProcessesSDK.PlatformValues?
  public var color: EffectiveProcessesSDK.PlatformAppearance?
  public var margin: EffectiveProcessesSDK.Margins?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InputFieldComponent : Swift.Codable {
  final public let label: EffectiveProcessesSDK.InputLabelStates?
  public var inputBox: EffectiveProcessesSDK.InputBoxStates?
  final public let feedbackArea: EffectiveProcessesSDK.InputFeedbackArea?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InputLabelStates : Swift.Codable {
  final public let defaultState: EffectiveProcessesSDK.TextBlock?
  final public let focusedState: EffectiveProcessesSDK.TextBlock?
  final public let errorState: EffectiveProcessesSDK.TextBlock?
  final public let disabledState: EffectiveProcessesSDK.TextBlock?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InputBoxStates : Swift.Codable {
  final public let defaultState: EffectiveProcessesSDK.InputBoxState?
  final public let focusedState: EffectiveProcessesSDK.InputBoxState?
  final public let errorState: EffectiveProcessesSDK.InputBoxState?
  final public let disabledState: EffectiveProcessesSDK.InputBoxState?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InputBoxState : Swift.Codable {
  final public let inputText: EffectiveProcessesSDK.TextBlock?
  final public let placeholder: EffectiveProcessesSDK.TextBlock?
  final public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  final public let border: EffectiveProcessesSDK.Border?
  final public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  final public let padding: EffectiveProcessesSDK.Margins?
  final public let margin: EffectiveProcessesSDK.Margins?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InputFeedbackArea : Swift.Codable {
  final public let validationMessage: EffectiveProcessesSDK.InputFeedbackStates?
  final public let assistiveText: EffectiveProcessesSDK.InputAssistiveText?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InputFeedbackStates : Swift.Codable {
  final public let defaultState: EffectiveProcessesSDK.InputFeedbackState?
  final public let focusedState: EffectiveProcessesSDK.InputFeedbackState?
  final public let errorState: EffectiveProcessesSDK.InputFeedbackState?
  final public let disabledState: EffectiveProcessesSDK.InputFeedbackState?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InputFeedbackState : Swift.Codable {
  final public let text: EffectiveProcessesSDK.TextStyles?
  final public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  final public let border: EffectiveProcessesSDK.Border?
  final public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  final public let padding: EffectiveProcessesSDK.Margins?
  final public let margin: EffectiveProcessesSDK.Margins?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InputAssistiveText : Swift.Codable {
  final public let defaultState: EffectiveProcessesSDK.AssistiveTextState?
  final public let focusedState: EffectiveProcessesSDK.AssistiveTextState?
  final public let errorState: EffectiveProcessesSDK.AssistiveTextState?
  final public let disabledState: EffectiveProcessesSDK.AssistiveTextState?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AssistiveTextState : Swift.Codable {
  public var text: EffectiveProcessesSDK.TextStyles?
  final public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  final public let border: EffectiveProcessesSDK.Border?
  final public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  final public let padding: EffectiveProcessesSDK.Margins?
  final public let margin: EffectiveProcessesSDK.Margins?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum IndicatorPosition : Swift.String, Swift.Codable {
  case left
  case right
  public var direction: EffectiveProcessesSDK.EDLayout {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class EPStyleCheckboxBoolean : Swift.Codable {
  final public let components: EffectiveProcessesSDK.CheckboxBooleanComponentsInput?
  public init(components: EffectiveProcessesSDK.CheckboxBooleanComponentsInput?)
  public static var empty: EffectiveProcessesSDK.EPStyleCheckboxBoolean {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CheckboxBooleanComponentsInput : Swift.Codable {
  final public let uiComponents: EffectiveProcessesSDK.CheckboxBooleanUIComponentsInput?
  public init(uiComponents: EffectiveProcessesSDK.CheckboxBooleanUIComponentsInput?)
  public static var empty: EffectiveProcessesSDK.CheckboxBooleanComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CheckboxBooleanUIComponentsInput : Swift.Codable {
  public var checkboxBoolean: EffectiveProcessesSDK.CheckboxBoolean?
  public init(checkboxBoolean: EffectiveProcessesSDK.CheckboxBoolean?)
  public static var empty: EffectiveProcessesSDK.CheckboxBooleanUIComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CheckboxBoolean : Swift.Codable {
  public let label: EffectiveProcessesSDK.CheckboxLabelStates?
  public let indicator: EffectiveProcessesSDK.CheckboxIndicator?
  public let tooltipIcon: EffectiveProcessesSDK.TooltipIcon?
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let border: EffectiveProcessesSDK.Border?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let padding: EffectiveProcessesSDK.Margins?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.CheckboxBoolean {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckboxLabelStates : Swift.Codable {
  public let defaultState: EffectiveProcessesSDK.CheckboxLabelState?
  public let activeState: EffectiveProcessesSDK.CheckboxLabelState?
  public static var empty: EffectiveProcessesSDK.CheckboxLabelStates {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckboxLabelState : Swift.Codable {
  public let text: EffectiveProcessesSDK.TextStyles?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.CheckboxLabelState {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckboxIndicator : Swift.Codable {
  public let position: EffectiveProcessesSDK.IndicatorPosition?
  public let defaultState: EffectiveProcessesSDK.CheckboxIndicatorState?
  public let activeState: EffectiveProcessesSDK.CheckboxIndicatorState?
  public init(position: EffectiveProcessesSDK.IndicatorPosition?, defaultState: EffectiveProcessesSDK.CheckboxIndicatorState?, activeState: EffectiveProcessesSDK.CheckboxIndicatorState?)
  public init(from decoder: any Swift.Decoder) throws
  public static var empty: EffectiveProcessesSDK.CheckboxIndicator {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CheckboxIndicatorState : Swift.Codable {
  public let size: EffectiveProcessesSDK.PlatformValues?
  public let color: EffectiveProcessesSDK.PlatformAppearance?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.CheckboxIndicatorState {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class EPStyleProductCard : Swift.Codable {
  final public let components: EffectiveProcessesSDK.ProductCardComponentsInput?
  public init(components: EffectiveProcessesSDK.ProductCardComponentsInput?)
  public static var empty: EffectiveProcessesSDK.EPStyleProductCard {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class ProductCardComponentsInput : Swift.Codable {
  final public let uiComponents: EffectiveProcessesSDK.ProductCardUIComponentsInput?
  public init(uiComponents: EffectiveProcessesSDK.ProductCardUIComponentsInput?)
  public static var empty: EffectiveProcessesSDK.ProductCardComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class ProductCardUIComponentsInput : Swift.Codable {
  public var productCard: EffectiveProcessesSDK.ProductCardStyle?
  public init(productCard: EffectiveProcessesSDK.ProductCardStyle?)
  public static var empty: EffectiveProcessesSDK.ProductCardUIComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ProductCardStyle : Swift.Codable {
  public let headerSection: EffectiveProcessesSDK.ProductCardHeaderSection?
  public let featuresSection: EffectiveProcessesSDK.ProductCardFeaturesSection?
  public let border: EffectiveProcessesSDK.Border?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let padding: EffectiveProcessesSDK.Margins?
  public let margin: EffectiveProcessesSDK.Margins?
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public static var empty: EffectiveProcessesSDK.ProductCardStyle {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductCardHeaderSection : Swift.Codable {
  public let iconContainer: EffectiveProcessesSDK.ProductCardIconContainer?
  public let title: EffectiveProcessesSDK.ProductCardTitle?
  public let description: EffectiveProcessesSDK.ProductCardDescription?
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let border: EffectiveProcessesSDK.Border?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let padding: EffectiveProcessesSDK.Margins?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.ProductCardHeaderSection {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductCardIconContainer : Swift.Codable {
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let border: EffectiveProcessesSDK.Border?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let padding: EffectiveProcessesSDK.Margins?
  public let margin: EffectiveProcessesSDK.Margins?
  public let size: EffectiveProcessesSDK.SizeValues?
  public let image: EffectiveProcessesSDK.ProductCardIconImage?
  public static var empty: EffectiveProcessesSDK.ProductCardIconContainer {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductCardIconImage : Swift.Codable {
  public let color: EffectiveProcessesSDK.PlatformAppearance?
  public let size: EffectiveProcessesSDK.PlatformValues?
  public static var empty: EffectiveProcessesSDK.ProductCardIconImage {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductCardTitle : Swift.Codable {
  public let text: EffectiveProcessesSDK.TextStyles?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.ProductCardTitle {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductCardDescription : Swift.Codable {
  public let text: EffectiveProcessesSDK.TextStyles?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.ProductCardDescription {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductCardFeaturesSection : Swift.Codable {
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let padding: EffectiveProcessesSDK.Margins?
  public let featureItem: EffectiveProcessesSDK.ProductCardFeatureItem?
  public static var empty: EffectiveProcessesSDK.ProductCardFeaturesSection {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductCardFeatureItem : Swift.Codable {
  public let iconContainer: EffectiveProcessesSDK.ProductCardIconContainer?
  public let title: EffectiveProcessesSDK.ProductCardTitle?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.ProductCardFeatureItem {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SizeValues : Swift.Codable {
  public let width: EffectiveProcessesSDK.PlatformValues?
  public let height: EffectiveProcessesSDK.PlatformValues?
  public static var empty: EffectiveProcessesSDK.SizeValues {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class EPStyleDatePicker : Swift.Codable {
  final public let components: EffectiveProcessesSDK.DatePickerComponentsInput?
  public init(components: EffectiveProcessesSDK.DatePickerComponentsInput?)
  public static var empty: EffectiveProcessesSDK.EPStyleDatePicker {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class DatePickerComponentsInput : Swift.Codable {
  final public let uiComponents: EffectiveProcessesSDK.DatePickerUIComponentsInput?
  public init(uiComponents: EffectiveProcessesSDK.DatePickerUIComponentsInput?)
  public static var empty: EffectiveProcessesSDK.DatePickerComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class DatePickerUIComponentsInput : Swift.Codable {
  public var datePicker: EffectiveProcessesSDK.DatePickerComponent?
  public init(datePicker: EffectiveProcessesSDK.DatePickerComponent?)
  public static var empty: EffectiveProcessesSDK.DatePickerUIComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct DatePickerComponent : Swift.Codable {
  public let label: EffectiveProcessesSDK.InputLabelStates?
  public let tooltipIcon: EffectiveProcessesSDK.TooltipIcon?
  public let calendarIcon: EffectiveProcessesSDK.CalendarIconStates?
  public let inputBox: EffectiveProcessesSDK.InputBoxStates?
  public let feedbackArea: EffectiveProcessesSDK.InputFeedbackArea?
  public let calendarOverlay: EffectiveProcessesSDK.CalendarOverlay?
  public static var empty: EffectiveProcessesSDK.DatePickerComponent {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CalendarIconStates : Swift.Codable {
  public let defaultState: EffectiveProcessesSDK.CalendarIconState?
  public let errorState: EffectiveProcessesSDK.CalendarIconState?
  public let disabledState: EffectiveProcessesSDK.CalendarIconState?
  public static var empty: EffectiveProcessesSDK.CalendarIconStates {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CalendarIconState : Swift.Codable {
  public let color: EffectiveProcessesSDK.PlatformAppearance?
  public let size: EffectiveProcessesSDK.SizeValues?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.CalendarIconState {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CalendarOverlay : Swift.Codable {
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let terminateButton: EffectiveProcessesSDK.ButtonProperties?
  public let accentColor: EffectiveProcessesSDK.PlatformAppearance?
  public static var empty: EffectiveProcessesSDK.CalendarOverlay {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class EPStyleNumericStepper : Swift.Codable {
  final public let components: EffectiveProcessesSDK.NumericStepperComponentsInput?
  public init(components: EffectiveProcessesSDK.NumericStepperComponentsInput?)
  public static var empty: EffectiveProcessesSDK.EPStyleNumericStepper {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class NumericStepperComponentsInput : Swift.Codable {
  final public let uiComponents: EffectiveProcessesSDK.NumericStepperUIComponentsInput?
  public init(uiComponents: EffectiveProcessesSDK.NumericStepperUIComponentsInput?)
  public static var empty: EffectiveProcessesSDK.NumericStepperComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class NumericStepperUIComponentsInput : Swift.Codable {
  public var numericStepper: EffectiveProcessesSDK.NumericStepperComponent?
  public init(numericStepper: EffectiveProcessesSDK.NumericStepperComponent?)
  public static var empty: EffectiveProcessesSDK.NumericStepperUIComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct NumericStepperComponent : Swift.Codable {
  public let label: EffectiveProcessesSDK.InputLabelStates?
  public let tooltipIcon: EffectiveProcessesSDK.TooltipIcon?
  public let valueDisplay: EffectiveProcessesSDK.ValueDisplayStates?
  public let incrementButton: EffectiveProcessesSDK.StepperButtonStates?
  public let decrementButton: EffectiveProcessesSDK.StepperButtonStates?
  public static var empty: EffectiveProcessesSDK.NumericStepperComponent {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ValueDisplayStates : Swift.Codable {
  public let defaultState: EffectiveProcessesSDK.ValueDisplayState?
  public let disabledState: EffectiveProcessesSDK.ValueDisplayState?
  public static var empty: EffectiveProcessesSDK.ValueDisplayStates {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ValueDisplayState : Swift.Codable {
  public let text: EffectiveProcessesSDK.TextStyles?
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let border: EffectiveProcessesSDK.Border?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let padding: EffectiveProcessesSDK.Margins?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.ValueDisplayState {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StepperButtonStates : Swift.Codable {
  public let defaultState: EffectiveProcessesSDK.StepperButtonState?
  public let limitReachedState: EffectiveProcessesSDK.StepperButtonState?
  public let disabledState: EffectiveProcessesSDK.StepperButtonState?
  public static var empty: EffectiveProcessesSDK.StepperButtonStates {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StepperButtonState : Swift.Codable {
  public let text: EffectiveProcessesSDK.TextStyles?
  public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  public let border: EffectiveProcessesSDK.Border?
  public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  public let padding: EffectiveProcessesSDK.Margins?
  public let margin: EffectiveProcessesSDK.Margins?
  public static var empty: EffectiveProcessesSDK.StepperButtonState {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class EPStyleComponent : Swift.Codable {
  final public let input: EffectiveProcessesSDK.EPStyleInput?
  final public let slider: EffectiveProcessesSDK.EPStyleSlider?
  final public let checkboxBoolean: EffectiveProcessesSDK.EPStyleCheckboxBoolean?
  final public let productCard: EffectiveProcessesSDK.EPStyleProductCard?
  final public let datePicker: EffectiveProcessesSDK.EPStyleDatePicker?
  final public let numericStepper: EffectiveProcessesSDK.EPStyleNumericStepper?
  final public let bottomSheetDropdown: EffectiveProcessesSDK.EPStyleBottomSheetDropdown?
  public init(input: EffectiveProcessesSDK.EPStyleInput? = nil, slider: EffectiveProcessesSDK.EPStyleSlider? = nil, checkboxBoolean: EffectiveProcessesSDK.EPStyleCheckboxBoolean? = nil, productCard: EffectiveProcessesSDK.EPStyleProductCard? = nil, datePicker: EffectiveProcessesSDK.EPStyleDatePicker? = nil, numericStepper: EffectiveProcessesSDK.EPStyleNumericStepper? = nil, bottomSheetDropdown: EffectiveProcessesSDK.EPStyleBottomSheetDropdown? = nil)
  public static var empty: EffectiveProcessesSDK.EPStyleComponent {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension EffectiveProcessesSDK.EPStyleComponent {
  public var safeInput: EffectiveProcessesSDK.EPStyleInput {
    get
  }
  public var safeSlider: EffectiveProcessesSDK.EPStyleSlider {
    get
  }
  public var safeCheckboxBoolean: EffectiveProcessesSDK.EPStyleCheckboxBoolean {
    get
  }
  public var safeProductCard: EffectiveProcessesSDK.EPStyleProductCard {
    get
  }
  public var safeDatePicker: EffectiveProcessesSDK.EPStyleDatePicker {
    get
  }
  public var safeNumericStepper: EffectiveProcessesSDK.EPStyleNumericStepper {
    get
  }
  public var safeBottomSheetDropdown: EffectiveProcessesSDK.EPStyleBottomSheetDropdown {
    get
  }
}
public class EPStyleBottomSheetDropdown : Swift.Codable {
  final public let components: EffectiveProcessesSDK.BottomSheetDropdownComponentsInput?
  public init(components: EffectiveProcessesSDK.BottomSheetDropdownComponentsInput?)
  public static var empty: EffectiveProcessesSDK.EPStyleBottomSheetDropdown {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetDropdownComponentsInput : Swift.Codable {
  final public let uiComponents: EffectiveProcessesSDK.BottomSheetDropdownUIComponentsInput?
  public init(uiComponents: EffectiveProcessesSDK.BottomSheetDropdownUIComponentsInput?)
  public static var empty: EffectiveProcessesSDK.BottomSheetDropdownComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetDropdownUIComponentsInput : Swift.Codable {
  public var bottomSheetDropdown: EffectiveProcessesSDK.BottomSheetDropdownComponent?
  public init(bottomSheetDropdown: EffectiveProcessesSDK.BottomSheetDropdownComponent?)
  public static var empty: EffectiveProcessesSDK.BottomSheetDropdownUIComponentsInput {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetDropdownComponent : Swift.Codable {
  final public let label: EffectiveProcessesSDK.BottomSheetDropdownLabelStates?
  final public let tooltipIcon: EffectiveProcessesSDK.TooltipIcon?
  final public let fieldIcon: EffectiveProcessesSDK.BottomSheetDropdownFieldIconStates?
  final public let inputBox: EffectiveProcessesSDK.InputBoxStates?
  final public let feedbackArea: EffectiveProcessesSDK.InputFeedbackArea?
  final public let bottomSheetOverlay: EffectiveProcessesSDK.BottomSheetOverlay?
  public init(label: EffectiveProcessesSDK.BottomSheetDropdownLabelStates?, tooltipIcon: EffectiveProcessesSDK.TooltipIcon?, fieldIcon: EffectiveProcessesSDK.BottomSheetDropdownFieldIconStates?, inputBox: EffectiveProcessesSDK.InputBoxStates?, feedbackArea: EffectiveProcessesSDK.InputFeedbackArea?, bottomSheetOverlay: EffectiveProcessesSDK.BottomSheetOverlay?)
  public static var empty: EffectiveProcessesSDK.BottomSheetDropdownComponent {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetDropdownLabelStates : Swift.Codable {
  final public let defaultState: EffectiveProcessesSDK.TextBlock?
  final public let errorState: EffectiveProcessesSDK.TextBlock?
  final public let disabledState: EffectiveProcessesSDK.TextBlock?
  public init(defaultState: EffectiveProcessesSDK.TextBlock?, errorState: EffectiveProcessesSDK.TextBlock?, disabledState: EffectiveProcessesSDK.TextBlock?)
  public static var empty: EffectiveProcessesSDK.BottomSheetDropdownLabelStates {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetDropdownFieldIconStates : Swift.Codable {
  final public let defaultState: EffectiveProcessesSDK.BottomSheetDropdownFieldIconState?
  final public let errorState: EffectiveProcessesSDK.BottomSheetDropdownFieldIconState?
  final public let disabledState: EffectiveProcessesSDK.BottomSheetDropdownFieldIconState?
  public init(defaultState: EffectiveProcessesSDK.BottomSheetDropdownFieldIconState?, errorState: EffectiveProcessesSDK.BottomSheetDropdownFieldIconState?, disabledState: EffectiveProcessesSDK.BottomSheetDropdownFieldIconState?)
  public static var empty: EffectiveProcessesSDK.BottomSheetDropdownFieldIconStates {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetDropdownFieldIconState : Swift.Codable {
  final public let color: EffectiveProcessesSDK.PlatformAppearance?
  final public let size: EffectiveProcessesSDK.SizeValues?
  final public let margin: EffectiveProcessesSDK.Margins?
  public init(color: EffectiveProcessesSDK.PlatformAppearance?, size: EffectiveProcessesSDK.SizeValues?, margin: EffectiveProcessesSDK.Margins?)
  public static var empty: EffectiveProcessesSDK.BottomSheetDropdownFieldIconState {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetOverlay : Swift.Codable {
  final public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  final public let header: EffectiveProcessesSDK.BottomSheetOverlayHeader?
  final public let body: EffectiveProcessesSDK.BottomSheetOverlayBody?
  public init(backgroundColor: EffectiveProcessesSDK.PlatformAppearance?, header: EffectiveProcessesSDK.BottomSheetOverlayHeader?, body: EffectiveProcessesSDK.BottomSheetOverlayBody?)
  public static var empty: EffectiveProcessesSDK.BottomSheetOverlay {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetOverlayHeader : Swift.Codable {
  final public let text: EffectiveProcessesSDK.TextStyles?
  final public let margin: EffectiveProcessesSDK.Margins?
  public init(text: EffectiveProcessesSDK.TextStyles?, margin: EffectiveProcessesSDK.Margins?)
  public static var empty: EffectiveProcessesSDK.BottomSheetOverlayHeader {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetOverlayBody : Swift.Codable {
  final public let bottomSheetOptionsCard: EffectiveProcessesSDK.BottomSheetOptionsCard?
  public init(bottomSheetOptionsCard: EffectiveProcessesSDK.BottomSheetOptionsCard?)
  public static var empty: EffectiveProcessesSDK.BottomSheetOverlayBody {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetOptionsCard : Swift.Codable {
  final public let backgroundColor: EffectiveProcessesSDK.PlatformAppearance?
  final public let border: EffectiveProcessesSDK.Border?
  final public let cornerRadius: EffectiveProcessesSDK.CornerRadius?
  final public let padding: EffectiveProcessesSDK.Margins?
  final public let margin: EffectiveProcessesSDK.Margins?
  final public let divider: EffectiveProcessesSDK.BorderProperties?
  final public let bottomSheetOption: EffectiveProcessesSDK.BottomSheetOption?
  public init(backgroundColor: EffectiveProcessesSDK.PlatformAppearance?, border: EffectiveProcessesSDK.Border?, cornerRadius: EffectiveProcessesSDK.CornerRadius?, padding: EffectiveProcessesSDK.Margins?, margin: EffectiveProcessesSDK.Margins?, divider: EffectiveProcessesSDK.BorderProperties?, bottomSheetOption: EffectiveProcessesSDK.BottomSheetOption?)
  public static var empty: EffectiveProcessesSDK.BottomSheetOptionsCard {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetOption : Swift.Codable {
  final public let label: EffectiveProcessesSDK.BottomSheetOptionLabelStates?
  final public let activeIndicator: EffectiveProcessesSDK.BottomSheetActiveIndicator?
  public init(label: EffectiveProcessesSDK.BottomSheetOptionLabelStates?, activeIndicator: EffectiveProcessesSDK.BottomSheetActiveIndicator?)
  public static var empty: EffectiveProcessesSDK.BottomSheetOption {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetOptionLabelStates : Swift.Codable {
  final public let defaultState: EffectiveProcessesSDK.TextBlock?
  final public let activeState: EffectiveProcessesSDK.TextBlock?
  public init(defaultState: EffectiveProcessesSDK.TextBlock?, activeState: EffectiveProcessesSDK.TextBlock?)
  public static var empty: EffectiveProcessesSDK.BottomSheetOptionLabelStates {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BottomSheetActiveIndicator : Swift.Codable {
  final public let size: EffectiveProcessesSDK.SizeValues?
  final public let color: EffectiveProcessesSDK.PlatformAppearance?
  final public let margin: EffectiveProcessesSDK.Margins?
  public init(size: EffectiveProcessesSDK.SizeValues?, color: EffectiveProcessesSDK.PlatformAppearance?, margin: EffectiveProcessesSDK.Margins?)
  public static var empty: EffectiveProcessesSDK.BottomSheetActiveIndicator {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class DesignTokenLoader {
  public static func loadDesignTokens<T>(for resourceName: Swift.String, as type: T.Type) -> T? where T : Swift.Decodable, T : Swift.Encodable
  @objc deinit
}
extension EffectiveProcessesSDK.DesignTokenLoader {
  @discardableResult
  public static func registerDesignTokens<T>(for resourceName: Swift.String, as type: T.Type, emptyToken: T) -> Swift.Bool where T : Swift.Decodable, T : Swift.Encodable
  public static func loadBottomSheetDropdownDesignTokens() -> EffectiveProcessesSDK.EPStyleBottomSheetDropdown?
  public static func loadInputDesignTokens() -> EffectiveProcessesSDK.EPStyleInput?
  public static func loadSliderDesignTokens() -> EffectiveProcessesSDK.EPStyleSlider?
  public static func loadCheckboxDesignTokens() -> EffectiveProcessesSDK.EPStyleCheckboxBoolean?
  public static func loadProductCardDesignTokens() -> EffectiveProcessesSDK.EPStyleProductCard?
  public static func loadDatePickerDesignTokens() -> EffectiveProcessesSDK.EPStyleDatePicker?
  public static func loadNumericStepperDesignTokens() -> EffectiveProcessesSDK.EPStyleNumericStepper?
  public static func loadV2() -> EffectiveProcessesSDK.EPStyleV2?
}
extension EffectiveProcessesSDK.DesignTokenLoader {
  @discardableResult
  public static func registerBottomSheetDropdownDesignTokens() -> Swift.Bool
  @discardableResult
  public static func registerV1() -> Swift.Bool
  @discardableResult
  public static func registerV2() -> Swift.Bool
  @discardableResult
  public static func registerInputDesignTokens() -> Swift.Bool
  @discardableResult
  public static func registerSliderDesignTokens() -> Swift.Bool
  @discardableResult
  public static func registerCheckboxDesignTokens() -> Swift.Bool
  @discardableResult
  public static func registerProductCardDesignTokens() -> Swift.Bool
  @discardableResult
  public static func registerDatePickerDesignTokens() -> Swift.Bool
  @discardableResult
  public static func registerNumericStepperDesignTokens() -> Swift.Bool
  @discardableResult
  public static func registerRadioButtonDesignTokens() -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class DesignTokenManager {
  public static let shared: EffectiveProcessesSDK.DesignTokenManager
  public func ensureDesignTokenRegistered(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct DesignTokenToggleStyle : SwiftUI.ToggleStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: EffectiveProcessesSDK.DesignTokenToggleStyle.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK22DesignTokenToggleStyleV8makeBody13configurationQr7SwiftUI0fG13ConfigurationV_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct TextStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.TextStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK9TextStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func designTokenTextStyle(valueExist: Swift.Bool) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func designTokenHeaderSectionTextStyle(opacity: Swift.Double = 1) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct SectionFormTextStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.SectionFormTextStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK20SectionFormTextStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
public protocol DismissableView : SwiftUICore.View {
  func dismiss(completion: @escaping () -> Swift.Void)
}
public protocol EDStateUseCase {
  var state: ((EffectiveProcessesSDK.ApplicationState) -> Swift.Void)? { get set }
  var isLogedIn: Swift.Bool { get set }
}
public enum ApplicationState : Swift.Equatable {
  public static func == (lhs: EffectiveProcessesSDK.ApplicationState, rhs: EffectiveProcessesSDK.ApplicationState) -> Swift.Bool
  case sessionExpired(any Swift.Error), presentFlow(EffectiveProcessesSDK.ProcessInstance), logedOut, loggedIn(Swift.String)
}
public class EDStateUseCaseImpementation : EffectiveProcessesSDK.EDStateUseCase {
  public var isLogedIn: Swift.Bool
  public init(state: ((EffectiveProcessesSDK.ApplicationState) -> Swift.Void)? = nil)
  public var state: ((EffectiveProcessesSDK.ApplicationState) -> Swift.Void)?
  @objc deinit
}
extension EffectiveProcessesSDK.EPJourney {
  public struct Configuration {
  }
}
public protocol EPControllerProtocol {
  associatedtype ViewType
  var currentView: Self.ViewType { get }
}
@_Concurrency.MainActor @preconcurrency public class EPController<ViewType> : UIKit.UIViewController, EffectiveProcessesSDK.EPControllerProtocol where ViewType : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var currentView: ViewType {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(viewCreator: @escaping () -> ViewType = { ViewType() })
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @objc deinit
}
public protocol ViewModelState : Combine.ObservableObject {
  func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
}
public typealias Screen = (UIKit.UINavigationController?) -> UIKit.UIViewController
public struct EPJourney {
  public static var screen: (EffectiveProcessesSDK.ProcessInstance) -> ((any EffectiveProcessesSDK.EPOuterRouter)?) -> EffectiveProcessesSDK.Screen {
    get
  }
}
@_hasMissingDesignatedInitializers public class EPLocalization {
  public static let shared: EffectiveProcessesSDK.EPLocalization
  public func terminateCloseTitle() -> Swift.String
  public func terminateCloseMessage() -> Swift.String
  public func terminateActionTitle() -> Swift.String
  public func closeActionTitle() -> Swift.String
  @objc deinit
}
public typealias InAppResultBlock = (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstance>) -> Swift.Void
public typealias RequestBlock = (Swift.String, Swift.String, Foundation.Data?, @escaping EffectiveProcessesSDK.InAppResultBlock) -> Swift.Void
public protocol EPOuterRouter {
  func onFlowFinished()
  func onFlowAutoRedirect(string: Swift.String)
  var onAutoRedirectHandler: ((Swift.String, Swift.String, Swift.String, @escaping EffectiveProcessesSDK.RequestBlock) -> Swift.Void)? { get set }
}
extension EffectiveProcessesSDK.EPOuterRouter {
  public func onFlowAutoRedirect(string: Swift.String)
}
public protocol EPStepsRouter {
  func showNextStep(router: any EffectiveProcessesSDK.EPOuterRouter, processInstance: EffectiveProcessesSDK.ProcessInstance)
}
@_inheritsConvenienceInitializers final public class StepsRouter : EffectiveProcessesSDK.Router<UIKit.UINavigationController>, EffectiveProcessesSDK.EPStepsRouter {
  final public func showNextStep(router: any EffectiveProcessesSDK.EPOuterRouter, processInstance: EffectiveProcessesSDK.ProcessInstance)
  override public init(rootViewController: UIKit.UINavigationController?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class FlowRouter : EffectiveProcessesSDK.Router<UIKit.UIViewController>, EffectiveProcessesSDK.EPOuterRouter {
  final public var onAutoRedirectHandler: ((Swift.String, Swift.String, Swift.String, @escaping EffectiveProcessesSDK.RequestBlock) -> Swift.Void)?
  final public func onFlowAutoRedirect(string: Swift.String)
  final public func onFlowFinished()
  override public init(rootViewController: UIKit.UIViewController?)
  @objc deinit
}
open class Router<Root> where Root : UIKit.UIViewController {
  public init(rootViewController: Root?)
  weak public var rootViewController: Root?
  @objc deinit
}
public struct Constants {
  public static var defaultStyle: EffectiveProcessesSDK.EPStyle?
}
public class EPSdkMain {
  public static var shared: EffectiveProcessesSDK.EPSdkMain?
  @discardableResult
  required public init(builder: EffectiveProcessesSDK.EPSDK.Configuration, overrideState: Swift.Bool? = true, callback: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "init(builder: EPSDK.Configuration.Builder,callback: (() -> Void)? = nil, _ overrideState: Bool?)")
  @discardableResult
  required public init(uniqeID: Swift.String, token: Swift.String, shouldCheckExpiredToken: Swift.Bool, overrideState: Swift.Bool? = false, callback: (() -> Swift.Void)? = nil)
  public func parseAndRegisterStyles(rawJSON: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func registerDependancy(setBaseURL: Swift.String, setPinnedPublicKeyHashes: Swift.String)
  @objc deinit
}
public struct EPSDK {
  public struct Configuration {
    public class Builder {
      public init()
      public func setBaseURL(_ baseURL: Swift.String) -> EffectiveProcessesSDK.EPSDK.Configuration.Builder
      public func setUniqueID(_ id: Swift.String) -> EffectiveProcessesSDK.EPSDK.Configuration.Builder
      public func setToken(_ token: Swift.String) -> EffectiveProcessesSDK.EPSDK.Configuration.Builder
      public func setShouldCheckTokenExpired(_ shouldCheck: Swift.Bool) -> EffectiveProcessesSDK.EPSDK.Configuration.Builder
      public func setUseCase(_ useCase: any EffectiveProcessesSDK.EPUseCase) -> EffectiveProcessesSDK.EPSDK.Configuration.Builder
      public func setPinnedPublicKeyHashes(_ hash: Swift.String) -> EffectiveProcessesSDK.EPSDK.Configuration.Builder
      public func build() -> EffectiveProcessesSDK.EPSDK.Configuration
      @objc deinit
    }
  }
}
public protocol EPUseCase {
  func processNextStep(with body: Foundation.Data?, process processId: Swift.String, transaction transitionId: Swift.String, baseBackColor: UIKit.UIColor?, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstance>) -> Swift.Void)
  func validateStep(with body: Foundation.Data?, process processId: Swift.String, showSpinner: Swift.Bool) async throws -> EffectiveProcessesSDK.ValidationRecordResponse
  @available(*, deprecated, message: "Use startOrResumeProcessV2")
  func startOrResumeProcess(_ processId: Swift.String, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstance>) -> Swift.Void)
  func startOrResumeProcessV2(_ processId: Swift.String, showSpinner: Swift.Bool, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstance>) -> Swift.Void)
  func autheticatedStartOrResumeProcess(_ processId: Swift.String, checkTokenValidity: Swift.Bool, token: Swift.String, outerRouter: any EffectiveProcessesSDK.EPOuterRouter, navigation: UIKit.UIViewController?, callback: ((any Swift.Error) -> Swift.Void)?)
  func anonymousStartOrResumeProcess(_ processId: Swift.String, outerRouter: any EffectiveProcessesSDK.EPOuterRouter, navigation: UIKit.UIViewController?, callback: ((any Swift.Error) -> Swift.Void)?)
  func terminateProcess(_ processId: Swift.String, callback: @escaping () -> Swift.Void)
  func uploadFile<T>(_ processId: Swift.String, transitionId: Swift.String, fileURL: Foundation.URL, fileName: Swift.String, mimeType: Swift.String, progressHandler: ((Swift.Double) -> Swift.Void)?, callback: @escaping (EffectiveProcessesSDK.Result<T>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  func openFlow(_ instance: EffectiveProcessesSDK.ProcessInstance, outerRouter: any EffectiveProcessesSDK.EPOuterRouter, navigation: UIKit.UIViewController?)
  func getContextProcesses(for name: Swift.String, query: [Swift.String : Swift.String]?, checkTokenExpired: Swift.Bool, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ContextFlows>) -> Swift.Void)
  func startOrResumeContextProcess(name: Swift.String, data: [Swift.String : Swift.String], checkTokenExpired: Swift.Bool, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstance>) -> Swift.Void)
  func autheticateAnonymousUser(path: Swift.String, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.AnonymousLoginResponse>) -> Swift.Void)
  var processInstancePath: Swift.String { get }
  func aiAssistent(message: EffectiveProcessesSDK.ProcessInstanceAIChat, checkTokenExpired: Swift.Bool, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstanceAIChat>) -> Swift.Void)
  func isProcessInstancePresented(_ instanceId: Swift.String) -> Swift.Bool
  func dismissProcessInstance(completion: (() -> Swift.Void)?)
}
public class EPUseCaseDefaultImpl : EffectiveProcessesSDK.EPUseCase {
  public func startOrResumeProcessV2(_ processId: Swift.String, showSpinner: Swift.Bool, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstance>) -> Swift.Void)
  public func validateStep(with body: Foundation.Data?, process processId: Swift.String, showSpinner: Swift.Bool = false) async throws -> EffectiveProcessesSDK.ValidationRecordResponse
  public func aiAssistent(message: EffectiveProcessesSDK.ProcessInstanceAIChat, checkTokenExpired: Swift.Bool, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstanceAIChat>) -> Swift.Void)
  public func autheticateAnonymousUser(path: Swift.String, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.AnonymousLoginResponse>) -> Swift.Void)
  public func getContextProcesses(for name: Swift.String, query: [Swift.String : Swift.String]? = nil, checkTokenExpired: Swift.Bool, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ContextFlows>) -> Swift.Void)
  public func startOrResumeContextProcess(name: Swift.String, data: [Swift.String : Swift.String], checkTokenExpired: Swift.Bool, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstance>) -> Swift.Void)
  public func openFlow(_ instance: EffectiveProcessesSDK.ProcessInstance, outerRouter: any EffectiveProcessesSDK.EPOuterRouter, navigation: UIKit.UIViewController?)
  public func autheticatedStartOrResumeProcess(_ processId: Swift.String, checkTokenValidity: Swift.Bool = false, token: Swift.String, outerRouter: any EffectiveProcessesSDK.EPOuterRouter, navigation: UIKit.UIViewController?, callback: ((any Swift.Error) -> Swift.Void)?)
  public func anonymousStartOrResumeProcess(_ processId: Swift.String, outerRouter: any EffectiveProcessesSDK.EPOuterRouter, navigation: UIKit.UIViewController?, callback: ((any Swift.Error) -> Swift.Void)?)
  public func terminateProcess(_ processId: Swift.String, callback: @escaping () -> Swift.Void)
  public func uploadFile<T>(_ processId: Swift.String, transitionId: Swift.String, fileURL: Foundation.URL, fileName: Swift.String, mimeType: Swift.String, progressHandler: ((Swift.Double) -> Swift.Void)?, callback: @escaping (EffectiveProcessesSDK.Result<T>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  public func processNextStep(with body: Foundation.Data?, process processId: Swift.String, transaction transitionId: Swift.String, baseBackColor: UIKit.UIColor? = nil, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstance>) -> Swift.Void)
  public func startOrResumeProcess(_ processId: Swift.String, callback: @escaping (EffectiveProcessesSDK.Result<EffectiveProcessesSDK.ProcessInstance>) -> Swift.Void)
  public var processInstancePath: Swift.String {
    get
  }
  public init(serverUrl: Foundation.URL)
  public func isProcessInstancePresented(_ instanceId: Swift.String) -> Swift.Bool
  public func dismissProcessInstance(completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct EdNgMarginStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(margins: EffectiveProcessesSDK.Margins?, platform: Swift.String = "ios")
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgMarginStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK23EdNgMarginStyleModifierV4body7contentQr7SwiftUI05_ViewH8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgPaddingStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(padding: EffectiveProcessesSDK.Margins?, platform: Swift.String = "ios")
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgPaddingStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK24EdNgPaddingStyleModifierV4body7contentQr7SwiftUI05_ViewH8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgCornerRadiusStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(cornerRadius: EffectiveProcessesSDK.CornerRadius?, platform: Swift.String = "ios")
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgCornerRadiusStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK29EdNgCornerRadiusStyleModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgDividerStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(dividerStyle: EffectiveProcessesSDK.BorderProperties?, platform: Swift.String = "ios")
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgDividerStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK24EdNgDividerStyleModifierV4body7contentQr7SwiftUI05_ViewH8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgFieldIconStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(iconStyles: EffectiveProcessesSDK.BottomSheetDropdownFieldIconState?, platform: Swift.String = "ios")
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgFieldIconStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK26EdNgFieldIconStyleModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgTooltipIconStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(iconStyles: EffectiveProcessesSDK.TooltipIcon?, platform: Swift.String = "ios")
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgTooltipIconStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK28EdNgTooltipIconStyleModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgActiveIndicatorStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(indicatorStyles: EffectiveProcessesSDK.BottomSheetActiveIndicator?, platform: Swift.String = "ios")
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgActiveIndicatorStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK32EdNgActiveIndicatorStyleModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func edNgMarginStyle(margins: EffectiveProcessesSDK.Margins?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgPaddingStyle(padding: EffectiveProcessesSDK.Margins?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgCornerRadiusStyle(cornerRadius: EffectiveProcessesSDK.CornerRadius?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgDividerStyle(dividerStyle: EffectiveProcessesSDK.BorderProperties?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgFieldIconStyle(iconStyles: EffectiveProcessesSDK.BottomSheetDropdownFieldIconState?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgTooltipIconStyle(iconStyles: EffectiveProcessesSDK.TooltipIcon?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgActiveIndicatorStyle(indicatorStyles: EffectiveProcessesSDK.BottomSheetActiveIndicator?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct EdNgCardFrameModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(border: EffectiveProcessesSDK.Border, cornerRadius: EffectiveProcessesSDK.CornerRadius, platform: Swift.String? = nil, margins: EffectiveProcessesSDK.Margins? = nil)
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgCardFrameModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK21EdNgCardFrameModifierV4body7contentQr7SwiftUI05_ViewH8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgDesign : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(platform: Swift.String? = nil, textSize: EffectiveProcessesSDK.PlatformValues? = nil, textWeight: EffectiveProcessesSDK.PlatformValues? = nil, textAlignment: EffectiveProcessesSDK.PlatformValues? = nil, textLineLimit: EffectiveProcessesSDK.PlatformValues? = nil, textColor: EffectiveProcessesSDK.PlatformAppearance? = nil, margins: EffectiveProcessesSDK.Margins? = nil)
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgDesign.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK10EdNgDesignV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgCornerRadiusModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(platform: Swift.String? = nil, cornerRadius: EffectiveProcessesSDK.CornerRadius?)
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgCornerRadiusModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK24EdNgCornerRadiusModifierV4body7contentQr7SwiftUI05_ViewH8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func edNgCornerCardRadius(tokens: EffectiveProcessesSDK.EPStyleV2 = Resolver.resolve(), platform: Swift.String? = nil) -> some SwiftUICore.View
  
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func applyDesignTokens(border: EffectiveProcessesSDK.Border, cornerRadius: EffectiveProcessesSDK.CornerRadius, platform: Swift.String = "ios")
}
@_Concurrency.MainActor @preconcurrency public struct EdNgInputLabelStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(labelStates: EffectiveProcessesSDK.InputLabelStates?, platform: Swift.String, isFocused: Swift.Bool, isValid: Swift.Bool, isDisabled: Swift.Bool, margins: EffectiveProcessesSDK.Margins?)
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgInputLabelStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK27EdNgInputLabelStyleModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgInputFieldBoxStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgInputFieldBoxStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK22EdNgInputFieldBoxStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgInputFeedbackStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgInputFeedbackStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK22EdNgInputFeedbackStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgAssistiveTextStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgAssistiveTextStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK22EdNgAssistiveTextStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgDirectTextInputLabelStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgDirectTextInputLabelStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK37EdNgDirectTextInputLabelStyleModifierV4body7contentQr7SwiftUI05_ViewK8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgCalendarIconStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgCalendarIconStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK29EdNgCalendarIconStyleModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgTerminateButtonIconStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgTerminateButtonIconStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK36EdNgTerminateButtonIconStyleModifierV4body7contentQr7SwiftUI05_ViewJ8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func edNgInputLabelStyle(labelStates: EffectiveProcessesSDK.InputLabelStates?, platform: Swift.String = "ios", isFocused: Swift.Bool, isValid: Swift.Bool, isDisabled: Swift.Bool = false, margins: EffectiveProcessesSDK.Margins? = nil) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgInputFieldBoxStyle(state: EffectiveProcessesSDK.InputBoxState?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgInputFeedbackStyle(feedbackStates: EffectiveProcessesSDK.InputFeedbackStates?, platform: Swift.String = "ios", isFocused: Swift.Bool, isValid: Swift.Bool) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgAssistiveTextStyle(assistiveTextStates: EffectiveProcessesSDK.InputAssistiveText?, platform: Swift.String = "ios", isFocused: Swift.Bool, isValid: Swift.Bool) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgFeedbackInputCardFrame(state: EffectiveProcessesSDK.InputFeedbackState, platform: Swift.String? = nil) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgDirectTextInputLabelStyle(textStyles: EffectiveProcessesSDK.TextStyles?, platform: Swift.String = "ios", isFocused: Swift.Bool, isValid: Swift.Bool, margins: EffectiveProcessesSDK.Margins? = nil) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgCalendarIconStyle(iconStyles: EffectiveProcessesSDK.CalendarIconStates?, platform: Swift.String = "ios", isFocused: Swift.Bool, isValid: Swift.Bool) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgTerminateButtonIconStyle(iconStyles: EffectiveProcessesSDK.ButtonProperties?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct EdNgNumericStepperLabelStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(labelStates: EffectiveProcessesSDK.InputLabelStates?, platform: Swift.String, isFocused: Swift.Bool, isValid: Swift.Bool, isDisabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgNumericStepperLabelStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK28EdNgNumericStepperLabelStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgNumericStepperValueDisplayStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(states: EffectiveProcessesSDK.ValueDisplayStates?, platform: Swift.String, isDisabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgNumericStepperValueDisplayStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK35EdNgNumericStepperValueDisplayStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgNumericStepperButtonStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(states: EffectiveProcessesSDK.StepperButtonStates?, platform: Swift.String, isDisabled: Swift.Bool, isLimitReached: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgNumericStepperButtonStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK29EdNgNumericStepperButtonStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func edNgNumericStepperLabelStyle(labelStates: EffectiveProcessesSDK.InputLabelStates?, platform: Swift.String = "ios", isFocused: Swift.Bool = false, isValid: Swift.Bool = true, isDisabled: Swift.Bool = false) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgNumericStepperValueDisplayStyle(states: EffectiveProcessesSDK.ValueDisplayStates?, platform: Swift.String = "ios", isDisabled: Swift.Bool = false) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgNumericStepperButtonStyle(states: EffectiveProcessesSDK.StepperButtonStates?, platform: Swift.String = "ios", isDisabled: Swift.Bool = false, isLimitReached: Swift.Bool = false) -> some SwiftUICore.View
  
}
public struct EdNgCornerShape : SwiftUICore.Shape {
  public init(cornerRadius: EffectiveProcessesSDK.CornerRadius?, platform: Swift.String)
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  public typealias Body = SwiftUICore._ShapeView<EffectiveProcessesSDK.EdNgCornerShape, SwiftUICore.ForegroundStyle>
}
public struct EdNgUnifiedCornerShape : SwiftUICore.Shape {
  public init(cornerRadius: EffectiveProcessesSDK.CornerRadius?, platform: Swift.String = "ios")
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  public typealias Body = SwiftUICore._ShapeView<EffectiveProcessesSDK.EdNgUnifiedCornerShape, SwiftUICore.ForegroundStyle>
}
public struct AnyShape : SwiftUICore.Shape {
  public init<S>(_ shape: S) where S : SwiftUICore.Shape
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  public typealias Body = SwiftUICore._ShapeView<EffectiveProcessesSDK.AnyShape, SwiftUICore.ForegroundStyle>
}
@_Concurrency.MainActor @preconcurrency public struct EdNgBorderView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(border: EffectiveProcessesSDK.Border?, cornerRadius: EffectiveProcessesSDK.CornerRadius? = nil, platform: Swift.String = "ios")
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK14EdNgBorderViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgSliderTrackStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgSliderTrackStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK20EdNgSliderTrackStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgSliderProgressStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgSliderProgressStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK23EdNgSliderProgressStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgSliderThumbStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgSliderThumbStyle.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK20EdNgSliderThumbStyleV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct EdNgSliderLabelStyleModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: EffectiveProcessesSDK.EdNgSliderLabelStyleModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK28EdNgSliderLabelStyleModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func edNgSliderTrackStyle(state: EffectiveProcessesSDK.SliderControlStates?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgSliderProgressStyle(state: EffectiveProcessesSDK.SliderControlStates?, platform: Swift.String = "ios") -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgSliderThumb(thumbState: EffectiveProcessesSDK.Thumb?, platform: Swift.String = "ios", progress: CoreFoundation.CGFloat, thumbSize: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func edNgSliderLabelStyle(labelStates: EffectiveProcessesSDK.SliderControlStates?, platform: Swift.String = "ios", isFocused: Swift.Bool, isValid: Swift.Bool, isDisabled: Swift.Bool = false, margins: EffectiveProcessesSDK.Margins? = nil, isMin: Swift.Bool) -> some SwiftUICore.View
  
}
public enum FieldType : Swift.String {
  case none
  case string
  case integer
  case decimal
  case date
  case bool
  case fk
  case multipleSelect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class FilePreviewModel : EffectiveProcessesSDK.ViewModelState {
  public func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public init(url: Foundation.URL?, document: EffectiveProcessesSDK.Document? = nil, isTabable: Swift.Bool = true)
  @Combine.Published @_projectedValueProperty($url) public var url: Foundation.URL? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $url: Combine.Published<Foundation.URL?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($document) public var document: EffectiveProcessesSDK.Document? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $document: Combine.Published<EffectiveProcessesSDK.Document?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var isTabable: Swift.Bool
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class GenericViewTableView<T> : UIKit.UIView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource where T : EffectiveProcessesSDK.DescriptiveProtocol {
  @_Concurrency.MainActor @preconcurrency public var didSelect: (T) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public var didPullDown: () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public var onLoadData: () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public var source: [[T]] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hasMoreData: Swift.Bool
  @_Concurrency.MainActor @preconcurrency convenience public init(source: [[T]], heightForRow: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
public var bundle: Foundation.Bundle? {
  get
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HTTPNetworkError : Swift.String, Swift.Error {
  case parametersNil
  case headersNil
  case encodingFailed
  case decodingFailed
  case missingURL
  case couldNotParse
  case noData
  case FragmentResponse
  case UnwrappingError
  case dataTaskFailed
  case success
  case authenticationError
  case badRequest
  case pageNotFound
  case failed
  case serverSideError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias HTTPParameters = [Foundation.URLQueryItem]
public typealias HTTPHeaders = [Swift.String : Swift.String]
public struct Endpoint {
  public init(path: Swift.String, httpMethod: EffectiveProcessesSDK.HTTPMethod, headers: EffectiveProcessesSDK.HTTPHeaders? = nil, body: Foundation.Data? = nil, queryItems: [Foundation.URLQueryItem]? = nil)
}
extension EffectiveProcessesSDK.Endpoint {
  public var urlComponents: Foundation.URLComponents {
    get
  }
  public var request: Foundation.URLRequest {
    get
  }
}
public enum HTTPNetworkRoute : Swift.String {
  case posts
  case comments
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct HTTPNetworkResponse {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class JCOTPComponent : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency public var defaultCharacter: Swift.String
  @_Concurrency.MainActor @preconcurrency public var regularExpressionPattern: Swift.String
  @_Concurrency.MainActor @preconcurrency public var componentBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var filledBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var cornerRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var defaultBorderColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var filledBorderColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var defaultBorderWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var filledBorderWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var componentTextColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var fontSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var spacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var componentFont: UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency weak public var componentDelegate: (any EffectiveProcessesSDK.JCOTPComponentDelegate)?
  @_Concurrency.MainActor @preconcurrency public func configure(with digits: Swift.Int = 6)
  @_Concurrency.MainActor @preconcurrency public func clearDigits()
  @_Concurrency.MainActor @preconcurrency public func setDigits(_ text: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol JCOTPComponentDelegate : AnyObject {
  func didFinishEnter(code: Swift.String, completion: (Swift.Bool) -> Swift.Void)
  func onEnter(code: Swift.String)
  func onBeginEnter(code: Swift.String)
}
@objc public class Language : ObjectiveC.NSObject, Swift.Codable, Swift.Identifiable {
  final public let id: Foundation.UUID
  final public let langCode: Swift.String, langName: Swift.String
  final public let languageDefault: Swift.Bool
  public typealias ID = Foundation.UUID
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias Languages = [EffectiveProcessesSDK.Language]
public enum LogLevel : Swift.String {
  case info
  case warning
  case error
  case success
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LoggerConfiguration {
  public static var isRemoteLoggingEnabled: Swift.Bool
  public static var batchSize: Swift.Int
  public static var endpointPath: Swift.String
  public static var maxRetries: Swift.Int
  public static var retryDelaySeconds: Swift.Double
  public static var maxBackoffSeconds: Swift.Double
  public static var jitterFactor: Swift.Double
}
public struct Logger {
  public static var minimumLogLevel: EffectiveProcessesSDK.LogLevel
  public static func log(_ message: Any..., level: EffectiveProcessesSDK.LogLevel = Self.minimumLogLevel, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, isSensitive: Swift.Bool = false)
  public static func initializeLoggingSupport()
  public static func resetRetryState()
  public static func getRetryStatus() -> (retryCount: Swift.Int, isUploading: Swift.Bool, timeSinceLastRetry: Foundation.TimeInterval)
  public static func getRetryStatistics() -> (retryCount: Swift.Int, isUploading: Swift.Bool, timeSinceLastRetry: Foundation.TimeInterval, nextRetryDelay: Foundation.TimeInterval?, bufferSize: Swift.Int, maxRetries: Swift.Int, isRemoteLoggingEnabled: Swift.Bool)
  public static func configureFromResponseHeaders(_ headers: [Swift.AnyHashable : Any])
}
@_Concurrency.MainActor @preconcurrency public struct MessagesView : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  @SwiftUICore.StateObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.MessagesViewModel {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.MessagesViewModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK12MessagesViewV4bodyQrvp", 0) __
  public typealias Model = EffectiveProcessesSDK.MessagesViewModel
}
@_hasMissingDesignatedInitializers public class MessagesViewModel : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
open class MultiSelectCheckboxModel : EffectiveProcessesSDK.ViewModelState {
  @Combine.Published @_projectedValueProperty($options) public var options: [EffectiveProcessesSDK.Option] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $options: Combine.Published<[EffectiveProcessesSDK.Option]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($multiSelection) public var multiSelection: Swift.Set<Swift.String> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $multiSelection: Combine.Published<Swift.Set<Swift.String>>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(options: [EffectiveProcessesSDK.Option], multiSelection: Swift.Set<Swift.String>)
  open func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol MultiSelectCheckboxProvider {
  var multiSelectCheckboxView: (Swift.String, [EffectiveProcessesSDK.Option], Swift.Set<Swift.String>, Swift.String?) -> (EffectiveProcessesSDK.MultiSelectCheckboxModel, UIKit.UIView) { get set }
}
@available(iOS 15.0, *)
@_Concurrency.MainActor @preconcurrency public struct MultiSelectCheckboxView : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  @_Concurrency.MainActor @preconcurrency public var label: Swift.String
  @SwiftUICore.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.MultiSelectCheckboxModel {
    get
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.MultiSelectCheckboxModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var tooltipText: Swift.String?
  @_Concurrency.MainActor @preconcurrency public init(label: Swift.String, model: EffectiveProcessesSDK.MultiSelectCheckboxModel, tooltipText: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK23MultiSelectCheckboxViewV4bodyQrvp", 0) __
  @available(iOS 15.0, *)
  public typealias Model = EffectiveProcessesSDK.MultiSelectCheckboxModel
}
@_Concurrency.MainActor @preconcurrency public struct NonAnimatedUIKitModal<Presented> : SwiftUI.UIViewControllerRepresentable where Presented : EffectiveProcessesSDK.DismissableView {
  @_Concurrency.MainActor @preconcurrency public let isPresented: SwiftUICore.Binding<Swift.Bool>
  @_Concurrency.MainActor @preconcurrency public let content: () -> Presented
  @_Concurrency.MainActor @preconcurrency public init(isPresented: SwiftUICore.Binding<Swift.Bool>, content: @escaping () -> Presented)
  @_hasMissingDesignatedInitializers final public class Coordinator {
    @objc deinit
  }
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> EffectiveProcessesSDK.NonAnimatedUIKitModal<Presented>.Coordinator
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: EffectiveProcessesSDK.NonAnimatedUIKitModal<Presented>.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: EffectiveProcessesSDK.NonAnimatedUIKitModal<Presented>.Context)
  public typealias Body = Swift.Never
  public typealias UIViewControllerType = UIKit.UIViewController
}
public protocol NumericProvider {
  var stepper: (Swift.String, Swift.String, Swift.String, Swift.String, Swift.String) -> (EffectiveProcessesSDK.NumericStepperFieldModel, UIKit.UIView) { get set }
}
@_Concurrency.MainActor @preconcurrency public struct NumericStepperField : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  public typealias Model = EffectiveProcessesSDK.NumericStepperFieldModel
  @SwiftUICore.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.NumericStepperFieldModel {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.NumericStepperFieldModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(label: Swift.String, model: EffectiveProcessesSDK.NumericStepperFieldModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK19NumericStepperFieldV4bodyQrvp", 0) __
}
public class NumericStepperFieldModel : Foundation.ObservableObject, EffectiveProcessesSDK.ViewModelState {
  @Combine.Published @_projectedValueProperty($value) public var value: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $value: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isDisabled) public var isDisabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isDisabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isError) public var isError: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isError: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($errorMessage) public var errorMessage: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $errorMessage: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($tooltipText) public var tooltipText: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $tooltipText: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(value: Swift.Int?, min: Swift.Int, max: Swift.Int, isMandatory: Swift.Bool, tooltipText: Swift.String = "")
  public func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public func increment()
  public func decrement()
  public func setErrorState(message: Swift.String)
  public func clearValidation()
  public func setDisabledState()
  public func setEnabledState()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class PhoneNumberFieldModel : Foundation.ObservableObject, EffectiveProcessesSDK.ViewModelState {
  public func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  @Combine.Published @_projectedValueProperty($phoneNumber) public var phoneNumber: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $phoneNumber: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($fullPhoneNumber) public var fullPhoneNumber: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $fullPhoneNumber: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selectedCountry) public var selectedCountry: EffectiveProcessesSDK.CountryCode {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $selectedCountry: Combine.Published<EffectiveProcessesSDK.CountryCode>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showCountryPicker) public var showCountryPicker: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showCountryPicker: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var countryCodes: [EffectiveProcessesSDK.CountryCode]
  public init(phoneNumber: Swift.String?, placeholder: Swift.String, validation: Swift.String, selectedCountry: EffectiveProcessesSDK.CountryCode, countryCodes: [EffectiveProcessesSDK.CountryCode])
  public func trimPrefix(phoneNumber: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct CountryCode : Swift.Codable {
  public let flag: Swift.String
  public let code: Swift.String
  public let name: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PhoneNumberFieldProvider {
  var phoneNumber: (Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.Bool, [EffectiveProcessesSDK.CountryCode]) -> (EffectiveProcessesSDK.PhoneNumberFieldModel, UIKit.UIView) { get set }
}
extension EffectiveProcessesSDK.AppearanceValues {
  public func uiColor() -> UIKit.UIColor
}
public struct AppearanceColorHelper {
  public static func uiColor(from appearance: EffectiveProcessesSDK.AppearanceValues?) -> UIKit.UIColor
  public static func color(from appearance: EffectiveProcessesSDK.AppearanceValues?) -> SwiftUICore.Color
}
public enum EDLayout : Swift.String {
  case vertical
  case horizontal
  case left
  case right
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PlatformValuesHelper {
  public static func value(from platformValues: EffectiveProcessesSDK.PlatformValues?) -> CoreFoundation.CGFloat
  public static func textWeight(from platformValues: EffectiveProcessesSDK.PlatformValues?) -> UIKit.UIFont.Weight
  public static func alignment(from platformValues: EffectiveProcessesSDK.PlatformValues?) -> UIKit.NSTextAlignment
}
public struct SectionDataModel<T> {
}
@_hasMissingDesignatedInitializers public class ActiveProcessModel : Foundation.ObservableObject {
  public init(selectedItem: EffectiveProcessesSDK.ProcessItemNew, items: [EffectiveProcessesSDK.ProcessItemNew])
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension Swift.Array {
  public func categorizeByOptionalBooleanProperty(keyPath: Swift.KeyPath<Element, Swift.Bool?>, trueSectionName: Swift.String, falseSectionName: Swift.String, nilSectionName: Swift.String) -> [EffectiveProcessesSDK.SectionDataModel<Element>]
}
public struct ViewOffsetKey : SwiftUICore.PreferenceKey {
  public static var defaultValue: CoreFoundation.CGFloat
  public static func reduce(value: inout CoreFoundation.CGFloat, nextValue: () -> CoreFoundation.CGFloat)
  public typealias Value = CoreFoundation.CGFloat
}
@_Concurrency.MainActor @preconcurrency public struct ActiveProcessInstance : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  @SwiftUICore.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.ActiveProcessModel {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.ActiveProcessModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(model: EffectiveProcessesSDK.ActiveProcessModel, sectionOffsets: [CoreFoundation.CGFloat], isCurrentlyRefreshing: Swift.Bool = false, selectedPage: Swift.Int = 0)
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK21ActiveProcessInstanceV4bodyQrvp", 0) __
  public typealias Model = EffectiveProcessesSDK.ActiveProcessModel
}
public struct ScrollViewOffsetKey : SwiftUICore.PreferenceKey {
  public static var defaultValue: CoreFoundation.CGFloat
  public static func reduce(value: inout CoreFoundation.CGFloat, nextValue: () -> CoreFoundation.CGFloat)
  public typealias Value = CoreFoundation.CGFloat
}
public struct ActiveProcessInstanceMock {
  public static var model: EffectiveProcessesSDK.ActiveProcessModel
}
public struct ContextFlow : Swift.Codable {
  public let name: Swift.String
  public let bpmnDiagramName: Swift.String
  public let version: Swift.String
  public let environment: Swift.String?
  public let image: Swift.String
  public let title: Swift.String
  public let body: Swift.String
  public let documentation: Swift.String
  public let actionTitle: Swift.String
  public let terminationEnabled: Swift.Bool
  public let terminationConfirmationMsg: Swift.String
  public let resumeActionTitle: Swift.String
  public let resumeBody: Swift.String
  public let publicAccess: Swift.Bool?
  public let additionalProps: EffectiveProcessesSDK.AdditionalProps
  public init(name: Swift.String, bpmnDiagramName: Swift.String, version: Swift.String, environment: Swift.String?, image: Swift.String, title: Swift.String, body: Swift.String, documentation: Swift.String, actionTitle: Swift.String, terminationEnabled: Swift.Bool, terminationConfirmationMsg: Swift.String, resumeActionTitle: Swift.String, resumeBody: Swift.String, publicAccess: Swift.Bool?, additionalProps: EffectiveProcessesSDK.AdditionalProps)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdditionalProps : Swift.Codable {
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias ContextFlows = [EffectiveProcessesSDK.ContextFlow]
public struct ProcessInstance : Swift.Codable {
  public let id: Swift.String?
  public let action: Swift.String?
  public let camundaStepName: Swift.String?
  public let object: Swift.String?
  public let fields: [EffectiveProcessesSDK.Field]?
  public let record: EffectiveProcessesSDK.Record?
  public let urlItems: [EffectiveProcessesSDK.URLItem]?
  public var recordList: [EffectiveProcessesSDK.RecordList]?
  public let recordDetails: [EffectiveProcessesSDK.RecordDetail]?
  public let title: Swift.String?
  public let status: Swift.String?
  public let body: Swift.String?
  public let imageURL: Swift.String?
  public let terminated: Swift.Bool?
  public let redirect: Swift.Bool?
  public let validationEnabled: Swift.Bool?
  public let redirectPayload: Swift.String?
  public let transitions: [EffectiveProcessesSDK.Transition]?
  public var documents: [EffectiveProcessesSDK.Document]?
  public let products: [EffectiveProcessesSDK.Product]?
  public var designHash: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct URLItem : Swift.Codable, Swift.Identifiable {
  public let id: Swift.String
  public let title: Swift.String
  public let type: Swift.String
  public let mandatory: Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RecordList : Swift.Codable, Swift.Identifiable {
  public let upperLeft: Swift.String?
  public let upperRight: Swift.String?
  public let id: Swift.String?
  public let lowerRight: Swift.String?
  public let lowerLeft: Swift.String?
  public typealias ID = Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Document : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Field : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Option : Swift.Codable, Swift.Identifiable, Swift.Hashable {
  public let id: Swift.String, value: Swift.String
  public init(id: Swift.String, value: Swift.String)
  public static func == (a: EffectiveProcessesSDK.Option, b: EffectiveProcessesSDK.Option) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Record : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Answer : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RecordDetail : Swift.Codable, Swift.Identifiable {
  public var id: Swift.String?
  public init(id: Swift.String? = nil, name: Swift.String?, value: EffectiveProcessesSDK.Value?)
  public init(from decoder: any Swift.Decoder) throws
  public typealias ID = Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Transition : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ButtonType : Swift.String {
  case primary
  case secondary
  case destructive
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SchemaSelector : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProcessItemNew : Swift.Codable, Swift.Identifiable, Swift.Hashable {
  public var id: Foundation.UUID
  public let type: Swift.String
  public let instanceID: Swift.String
  public let name: Swift.String
  public let image: Swift.String
  public let title: Swift.String
  public let body: Swift.String
  public let actionTitle: Swift.String
  public let terminationEnabled: Swift.Bool?
  public let terminationConfirmationMsg: Swift.String?
  public let cardStyle: Swift.String?
  public var designHash: Swift.String? {
    get
    set
  }
  public init(id: Foundation.UUID, type: Swift.String, instanceID: Swift.String, name: Swift.String, image: Swift.String, title: Swift.String, body: Swift.String, actionTitle: Swift.String, terminationEnabled: Swift.Bool?, terminationConfirmationMsg: Swift.String?, cardStyle: Swift.String? = nil, designHash: Swift.String? = nil)
  public init(from decoder: any Swift.Decoder) throws
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case type
    case instanceID
    case name
    case image
    case title
    case body
    case actionTitle
    case terminationEnabled
    case terminationConfirmationMsg
    case cardStyle
    case designHash
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public static func == (a: EffectiveProcessesSDK.ProcessItemNew, b: EffectiveProcessesSDK.ProcessItemNew) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TypeEnum : Swift.String, Swift.Codable {
  case existingInstance
  case process
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ProcessInstanceAIChat : Swift.Codable {
  public var message: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Product : Swift.Identifiable, Swift.Codable, Swift.Hashable {
  public let id: Swift.String?
  public let code: Swift.String
  public let name: Swift.String
  public let description: Swift.String
  public let image: Swift.String?
  public let features: [EffectiveProcessesSDK.ProductFeature]
  public static func == (a: EffectiveProcessesSDK.Product, b: EffectiveProcessesSDK.Product) -> Swift.Bool
  public typealias ID = Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct ProductCardView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public let product: EffectiveProcessesSDK.Product
  @_Concurrency.MainActor @preconcurrency public let isSelected: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK15ProductCardViewV4bodyQrvp", 0) __
}
public struct ProductFeature : Swift.Identifiable, Swift.Codable, Swift.Hashable {
  public let id: Swift.String?
  public let code: Swift.String
  public let description: Swift.String
  public let icon: Swift.String?
  public init(code: Swift.String, description: Swift.String, icon: Swift.String?)
  public static func == (a: EffectiveProcessesSDK.ProductFeature, b: EffectiveProcessesSDK.ProductFeature) -> Swift.Bool
  public typealias ID = Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct ProductSelectionListView : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  @SwiftUICore.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.ProductSelectionViewModel {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.ProductSelectionViewModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public let title: Swift.String
  @_Concurrency.MainActor @preconcurrency public let bodyText: Swift.String
  @_Concurrency.MainActor @preconcurrency public init(viewModel: EffectiveProcessesSDK.ProductSelectionViewModel, title: Swift.String, bodyText: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK24ProductSelectionListViewV4bodyQrvp", 0) __
  public typealias Model = EffectiveProcessesSDK.ProductSelectionViewModel
}
public class ProductSelectionViewModel : EffectiveProcessesSDK.ViewModelState {
  public func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  @Combine.Published @_projectedValueProperty($products) public var products: [EffectiveProcessesSDK.Product] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $products: Combine.Published<[EffectiveProcessesSDK.Product]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selectedProductId) public var selectedProductId: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedProductId: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let onSelection: ((EffectiveProcessesSDK.Product) -> Swift.Void)?
  public init(products: [EffectiveProcessesSDK.Product], onSelection: ((EffectiveProcessesSDK.Product) -> Swift.Void)? = nil)
  public func selectProduct(_ product: EffectiveProcessesSDK.Product)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol NotificationManagerProtocol {
  func setup()
  var onNotificationRecived: (([Swift.AnyHashable : Any]) -> Swift.Void)? { get set }
  var authorized: Swift.Bool { get set }
  var fcmToken: Swift.String { get set }
  var presentationOptions: UserNotifications.UNNotificationPresentationOptions { get set }
  var lastUnAutherisedNotification: [Swift.AnyHashable : Any]? { get set }
}
@objc @_inheritsConvenienceInitializers public class PushNotificationManager : ObjectiveC.NSObject, EffectiveProcessesSDK.NotificationManagerProtocol {
  public var lastUnAutherisedNotification: [Swift.AnyHashable : Any]?
  public var presentationOptions: UserNotifications.UNNotificationPresentationOptions
  public var onNotificationRecived: (([Swift.AnyHashable : Any]) -> Swift.Void)?
  public var fcmToken: Swift.String
  public var authorized: Swift.Bool
  public func setup()
  @objc override dynamic public init()
  @objc deinit
}
extension EffectiveProcessesSDK.PushNotificationManager : UserNotifications.UNUserNotificationCenterDelegate {
  @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, openSettingsFor notification: UserNotifications.UNNotification?)
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public class func openAppSettings()
}
@available(iOS 15.0, *)
@_Concurrency.MainActor @preconcurrency public struct RadioButtonFkField : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  @_Concurrency.MainActor @preconcurrency public var label: Swift.String
  @SwiftUICore.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.RadioButtonFkModel {
    get
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.RadioButtonFkModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var tooltipText: Swift.String?
  @_Concurrency.MainActor @preconcurrency public init(label: Swift.String, model: EffectiveProcessesSDK.RadioButtonFkModel, tooltipText: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK18RadioButtonFkFieldV4bodyQrvp", 0) __
  @available(iOS 15.0, *)
  public typealias Model = EffectiveProcessesSDK.RadioButtonFkModel
}
open class RadioButtonFkModel : EffectiveProcessesSDK.ViewModelState {
  @Combine.Published @_projectedValueProperty($options) public var options: [EffectiveProcessesSDK.Option] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $options: Combine.Published<[EffectiveProcessesSDK.Option]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($singleSelection) public var singleSelection: Swift.Set<Swift.String> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $singleSelection: Combine.Published<Swift.Set<Swift.String>>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(options: [EffectiveProcessesSDK.Option], singleSelection: Swift.Set<Swift.String>)
  open func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(*, deprecated, message: "Use RatingProvider.ratingV2")
public protocol RatingProvider {
  var rating: (Swift.String, Swift.String, Swift.String) -> (EffectiveProcessesSDK.StarRatingModel, UIKit.UIView) { get set }
}
open class StarRatingModel : EffectiveProcessesSDK.ViewModelState {
  open func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public init(rating: Swift.Int, maximumRating: Swift.Int)
  @Combine.Published @_projectedValueProperty($rating) public var rating: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $rating: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let maximumRating: Swift.Int
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(*, deprecated, message: "Use RecordListSingleSelectionProvider.listV2")
public protocol RecordListSingleSelectionProvider {
  var list: (Swift.String, Swift.String, EffectiveProcessesSDK.CardItems) -> (EffectiveProcessesSDK.SingleSelectListOptionsModel, UIKit.UIView) { get set }
}
public enum Result<T> {
  case success(T)
  case failure(any Swift.Error)
}
public protocol SSLPinningDelegate : AnyObject {
  func didFailSSLPinning(with error: EffectiveProcessesSDK.SSLPinningError)
}
public enum SSLPinningError : Swift.Error {
  case invalidCertificate
  case publicKeyMismatch
  case unknown
  public static func == (a: EffectiveProcessesSDK.SSLPinningError, b: EffectiveProcessesSDK.SSLPinningError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Scan {
  public static var screen: UIKit.UIViewController {
    get
  }
}
public enum Value : Swift.Codable {
  case bool(Swift.Bool)
  case double(Swift.Double)
  case integer(Swift.Int)
  case string(Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol ScreenProvider {
  func view(for processInstance: EffectiveProcessesSDK.ProcessInstance) -> UIKit.UIView
}
open class DropDownListModel : Foundation.ObservableObject, EffectiveProcessesSDK.ViewModelState {
  @Combine.Published @_projectedValueProperty($prompt) public var prompt: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $prompt: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($options) public var options: [EffectiveProcessesSDK.Option] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $options: Combine.Published<[EffectiveProcessesSDK.Option]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selection) public var selection: EffectiveProcessesSDK.Option? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selection: Combine.Published<EffectiveProcessesSDK.Option?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($searchText) public var searchText: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $searchText: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showDropdown) public var showDropdown: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showDropdown: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($filteredOptions) public var filteredOptions: [EffectiveProcessesSDK.Option] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $filteredOptions: Combine.Published<[EffectiveProcessesSDK.Option]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($bestMatch) public var bestMatch: EffectiveProcessesSDK.Option? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $bestMatch: Combine.Published<EffectiveProcessesSDK.Option?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(prompt: Swift.String, options: [EffectiveProcessesSDK.Option], selection: EffectiveProcessesSDK.Option?)
  open func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public func selectBestMatch()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
open class SingleSelectListOptionsModel : EffectiveProcessesSDK.ViewModelState {
  open func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public init(items: EffectiveProcessesSDK.CardItems, singleSelection: Swift.Set<Swift.String>)
  @Combine.Published @_projectedValueProperty($items) public var items: EffectiveProcessesSDK.CardItems {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $items: Combine.Published<EffectiveProcessesSDK.CardItems>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($singleSelection) public var singleSelection: Swift.Set<Swift.String> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $singleSelection: Combine.Published<Swift.Set<Swift.String>>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct CardItem : Swift.Identifiable {
  public let id: Swift.String
  public typealias ID = Swift.String
}
public typealias CardItems = [EffectiveProcessesSDK.CardItem]
@available(*, deprecated, message: "Use SingleSelectListProvider.listViewV2")
public protocol SingleSelectListProvider {
  var listView: (Swift.String, EffectiveProcessesSDK.CardItems, Swift.String) -> (EffectiveProcessesSDK.SingleSelectListOptionsModel, UIKit.UIView) { get set }
}
@available(*, deprecated, message: "Use SingleSelectorDropDownProvider.selectorViewV2")
public protocol SingleSelectorDropDownProvider {
  var selectorView: (Swift.String, Swift.String, [EffectiveProcessesSDK.Option], Swift.String) -> (EffectiveProcessesSDK.DropDownListModel, UIKit.UIView) { get set }
}
@available(*, deprecated, message: "Use SingleSelectorCheckProvider.selectorViewV2")
public protocol SingleSelectorCheckProvider {
  var selectorView: (Swift.String, [EffectiveProcessesSDK.Option], Swift.String, Swift.String?) -> (EffectiveProcessesSDK.RadioButtonFkModel, UIKit.UIView) { get set }
}
@available(*, deprecated, message: "Use SliderProvider.sliderV2")
public protocol SliderProvider {
  var slider: (Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String) -> (EffectiveProcessesSDK.StandardTextFieldModel, UIKit.UIView) { get set }
}
@objc public protocol SneakPeekDelegate {
  @objc optional func sneekPeek(_: EffectiveProcessesSDK.SneakPeekCollectionViewDelegate, didChangeActiveIndexTo activeIndex: Swift.Int)
  @objc optional func sneakPeek(_: EffectiveProcessesSDK.SneakPeekCollectionViewDelegate, didSelectItemAt indexPath: Foundation.IndexPath)
}
@objc public class SneakPeekCollectionViewDelegate : ObjectiveC.NSObject {
  final public let cellSneakPeekWidth: CoreFoundation.CGFloat
  final public let cellSpacing: CoreFoundation.CGFloat
  final public let scrollThreshold: CoreFoundation.CGFloat
  final public let maximumItemsToScroll: Swift.Int
  final public let numberOfItemsToShow: Swift.Int
  final public let scrollDirection: UIKit.UICollectionView.ScrollDirection
  weak public var delegate: (any EffectiveProcessesSDK.SneakPeekDelegate)?
  public init(cellSpacing: CoreFoundation.CGFloat = 20, cellPeekWidth: CoreFoundation.CGFloat = 20, scrollThreshold: CoreFoundation.CGFloat = 50, maximumItemsToScroll: Swift.Int = 1, numberOfItemsToShow: Swift.Int = 1, scrollDirection: UIKit.UICollectionView.ScrollDirection = .horizontal)
  open func scrollView(_ scrollView: UIKit.UIScrollView, indexForItemAtContentOffset contentOffset: CoreFoundation.CGPoint) -> Swift.Int
  open func scrollView(_ scrollView: UIKit.UIScrollView, contentOffsetForItemAtIndex index: Swift.Int) -> CoreFoundation.CGFloat
  @objc deinit
}
extension EffectiveProcessesSDK.SneakPeekCollectionViewDelegate : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers open class Spinner {
  public static var style: UIKit.UIActivityIndicatorView.Style
  public static var baseBackColor: UIKit.UIColor
  public static var baseColor: UIKit.UIColor
  public static func start(style: UIKit.UIActivityIndicatorView.Style = style, backColor: UIKit.UIColor = baseBackColor, baseColor: UIKit.UIColor = baseColor)
  public static func stop()
  @objc deinit
}

public class StandardTextFieldModel : Foundation.ObservableObject, EffectiveProcessesSDK.ViewModelState {
  public func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  @Combine.Published @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($validatedText) public var validatedText: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $validatedText: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(text: Swift.String, placeholder: Swift.String, validation: Swift.String, isMandatory: Swift.Bool)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol StandardTextFieldProvider {
  var standard: (Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.Bool, UIKit.UIKeyboardType, CoreFoundation.CGFloat, Swift.Bool, Swift.String?, Swift.String?, Swift.Bool?, Swift.String?, Swift.Int?) -> (EffectiveProcessesSDK.StandardTextFieldModel, UIKit.UIView) { get set }
}
public enum EPState : Swift.Equatable {
  public static func == (lhs: EffectiveProcessesSDK.EPState, rhs: EffectiveProcessesSDK.EPState) -> Swift.Bool
  case idle, validated(data: Swift.String? = nil), incomplete, working, failed, success(data: Any? = nil), dataChanged(data: [Swift.String : Swift.String]? = nil)
}
extension Swift.String {
  public var formatDate: Swift.String? {
    get
  }
  public var toDate: Foundation.Date? {
    get
  }
  public var toDashDate: Foundation.Date? {
    get
  }
  public var toIsoDate: Foundation.Date? {
    get
  }
}
@objc public class SwiftTimer : ObjectiveC.NSObject {
  public init(timeInterval: Foundation.TimeInterval, userInfo: [Swift.String : Swift.AnyObject]?, repeats: Swift.Bool, timerAction: @escaping (EffectiveProcessesSDK.SwiftTimer) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SwiftUIWrapperView<Content> : UIKit.UIView where Content : EffectiveProcessesSDK.ModelBindable, Content : SwiftUICore.View, Content.Model : Combine.ObservableObject {
  @_Concurrency.MainActor @preconcurrency public init(swiftUIView: Content)
  @objc deinit
}
public protocol ModelBindable {
  associatedtype Model
  var model: Self.Model { get }
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SwiftUIToView<Content> : UIKit.UIView where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(swiftUIView: Content)
  @_Concurrency.MainActor @preconcurrency public func updateView(_ newView: Content)
  @objc deinit
}
public struct TakePicture {
  public static var screen: UIKit.UIViewController {
    get
  }
}
@_hasMissingDesignatedInitializers public class TestClass {
  public static var test: Swift.String {
    get
  }
  @objc deinit
}
open class TextAreaModel : EffectiveProcessesSDK.ViewModelState {
  open func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public init(text: Swift.String?, placeholder: Swift.String, validation: Swift.String)
  @Combine.Published @_projectedValueProperty($text) public var text: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $text: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var placeholder: Swift.String
  public var validation: Swift.String
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(*, deprecated, message: "Use TextAreaProvider.textAreaV2")
public protocol TextAreaProvider {
  var textArea: (Swift.String, Swift.String, Swift.String, Swift.String) -> (EffectiveProcessesSDK.TextAreaModel, UIKit.UIView) { get set }
}
@available(iOS 15.0, *)
@_Concurrency.MainActor @preconcurrency public struct ToggleSwitchField : SwiftUICore.View, EffectiveProcessesSDK.ModelBindable {
  @_Concurrency.MainActor @preconcurrency public var label: Swift.String
  @SwiftUICore.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: EffectiveProcessesSDK.ToggleSwitchFieldModel {
    get
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<EffectiveProcessesSDK.ToggleSwitchFieldModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(label: Swift.String, model: EffectiveProcessesSDK.ToggleSwitchFieldModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK17ToggleSwitchFieldV4bodyQrvp", 0) __
  @available(iOS 15.0, *)
  public typealias Model = EffectiveProcessesSDK.ToggleSwitchFieldModel
}
open class ToggleSwitchFieldModel : EffectiveProcessesSDK.ViewModelState {
  @Combine.Published @_projectedValueProperty($isOn) public var isOn: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $isOn: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var onToggle: ((Swift.Bool) -> Swift.Void)?
  public init(isOn: Swift.Bool = false)
  open func onChange(state: EffectiveProcessesSDK.EPState, type: EffectiveProcessesSDK.FieldType)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public var topMostController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func topMostControllerWhenActive() async -> UIKit.UIViewController?
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor @preconcurrency public func configureForSneakPeekingDelegate(scrollDirection: UIKit.UICollectionView.ScrollDirection = .horizontal)
}
extension UIKit.UIColor {
  convenience public init(light: UIKit.UIColor, dark: UIKit.UIColor)
  convenience public init(any: UIKit.UIColor)
  public var light: UIKit.UIColor {
    get
  }
  public var dark: UIKit.UIColor {
    get
  }
  convenience public init(hex: Swift.String)
}
extension UIKit.UIColor {
  public func invertedColor() -> UIKit.UIColor
  convenience public init?(hexString: Swift.String)
  convenience public init?(name: Swift.String)
}
extension UIKit.UIFont {
  public static func modifier(name: Swift.String?) -> UIKit.UIFont
}
extension SwiftUICore.Font {
  public static func modifier(font: UIKit.UIFont?) -> SwiftUICore.Font
}
extension UIKit.UINavigationBar {
  @_Concurrency.MainActor @preconcurrency public var barColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func attachToScrollView(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency public func reset()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func observeValue(forKeyPath _: Swift.String?, of _: Any?, change _: [Foundation.NSKeyValueChangeKey : Any]?, context _: Swift.UnsafeMutableRawPointer?)
}
@objc @_Concurrency.MainActor @preconcurrency open class ScalableCover : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func removeFromSuperview()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func observeValue(forKeyPath _: Swift.String?, of _: Any?, change _: [Foundation.NSKeyValueChangeKey : Any]?, context _: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
extension UIKit.UIScrollView {
  @_Concurrency.MainActor @preconcurrency public func addScalableCover(with image: UIKit.UIImage, maxHeight: CoreFoundation.CGFloat = 200)
  @_Concurrency.MainActor @preconcurrency public func removeScalableCover()
}
extension UIKit.UIView {
  @available(iOS 9, *)
  @_Concurrency.MainActor @preconcurrency public func fillToSuperview(left: CoreFoundation.CGFloat = 0, right: CoreFoundation.CGFloat = 0, top: CoreFoundation.CGFloat = 0, bottom: CoreFoundation.CGFloat = 0)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func anchor(top: UIKit.NSLayoutYAxisAnchor?, leading: UIKit.NSLayoutXAxisAnchor?, bottom: UIKit.NSLayoutYAxisAnchor?, trailing: UIKit.NSLayoutXAxisAnchor?, padding: UIKit.UIEdgeInsets = .zero, size: CoreFoundation.CGSize = .zero, topPriority: UIKit.UILayoutPriority = .required) -> EffectiveProcessesSDK.AnchoredConstraints
  @_Concurrency.MainActor @preconcurrency public func anchorFlexibleTop(bottomFixedTo bottom: UIKit.NSLayoutYAxisAnchor, leading: UIKit.NSLayoutXAxisAnchor, trailing: UIKit.NSLayoutXAxisAnchor, padding: UIKit.UIEdgeInsets = .zero)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func fillSuperview(padding: UIKit.UIEdgeInsets = .zero) -> EffectiveProcessesSDK.AnchoredConstraints
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func fillSuperviewSafeAreaLayoutGuide(padding: UIKit.UIEdgeInsets = .zero) -> EffectiveProcessesSDK.AnchoredConstraints
  @_Concurrency.MainActor @preconcurrency public func centerInSuperview(size: CoreFoundation.CGSize = .zero)
  @_Concurrency.MainActor @preconcurrency public func centerXToSuperview()
  @_Concurrency.MainActor @preconcurrency public func centerYToSuperview()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func constrainHeight(_ constant: CoreFoundation.CGFloat) -> EffectiveProcessesSDK.AnchoredConstraints
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func constrainWidth(_ constant: CoreFoundation.CGFloat) -> EffectiveProcessesSDK.AnchoredConstraints
  @_Concurrency.MainActor @preconcurrency public func setupShadow(opacity: Swift.Float = 0, radius: CoreFoundation.CGFloat = 0, offset: CoreFoundation.CGSize = .zero, color: UIKit.UIColor = .black)
  @_Concurrency.MainActor @preconcurrency convenience public init(backgroundColor: UIKit.UIColor = .clear)
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public func addBackground(color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func customize(backgroundColor: UIKit.UIColor = .clear, radiusSize: CoreFoundation.CGFloat = 0)
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public func customizeShadowCard(backgroundColor: UIKit.UIColor = .clear, radiusSize: CoreFoundation.CGFloat = 0, showShadowForCard: Swift.Bool = true) -> Self
  @_Concurrency.MainActor @preconcurrency public func addSubviewsNew(_ views: UIKit.UIView...)
  @_Concurrency.MainActor @preconcurrency public func addSubviews(_ views: [UIKit.UIView])
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public func customizeBackgroundColor(backgroundColor: UIKit.UIColor = .clear) -> Self
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var parentViewController: UIKit.UIViewController? {
    get
  }
}
public struct AnchoredConstraints {
  public var top: UIKit.NSLayoutConstraint?
  public var leading: UIKit.NSLayoutConstraint?
  public var bottom: UIKit.NSLayoutConstraint?
  public var trailing: UIKit.NSLayoutConstraint?
  public var width: UIKit.NSLayoutConstraint?
  public var height: UIKit.NSLayoutConstraint?
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func stack(_ views: [UIKit.UIView], spacing: CoreFoundation.CGFloat = 0, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fill) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func stack(_ views: UIKit.UIView..., spacing: CoreFoundation.CGFloat = 0, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fill) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func hstack(_ views: UIKit.UIView..., spacing: CoreFoundation.CGFloat = 0, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fill) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func withSize<T>(_ size: CoreFoundation.CGSize) -> T where T : UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func withHeight(_ height: CoreFoundation.CGFloat) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func withWidth(_ width: CoreFoundation.CGFloat) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func withBorder(width: CoreFoundation.CGFloat, color: UIKit.UIColor) -> UIKit.UIView
}
extension UIKit.UIEdgeInsets {
  public static func allSides(_ side: CoreFoundation.CGFloat) -> UIKit.UIEdgeInsets
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency convenience public init(image: UIKit.UIImage?, contentMode: UIKit.UIView.ContentMode = .scaleAspectFill)
  @_Concurrency.MainActor @preconcurrency public func setRounded()
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func shake()
}
extension UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency convenience public init(text: Swift.String?, font: UIKit.UIFont? = UIFont.systemFont(ofSize: 14), textColor: UIKit.UIColor = .black, textAlignment: UIKit.NSTextAlignment = .left, numberOfLines: Swift.Int = 1)
}
extension Swift.Decodable {
  public static func decode(data: Foundation.Data) throws -> Self
  public static func decode(json: [Swift.String : Any]) throws -> Self
}
extension Swift.Encodable {
  public func encode() -> [Swift.String : Any]?
}
extension Swift.Encodable {
  public func toDictionaryNSOBJ(_ encoder: Foundation.JSONEncoder = JSONEncoder()) throws -> [Swift.String : ObjectiveC.NSObject]
}
extension Swift.Encodable {
  public func toDictionary(_ encoder: Foundation.JSONEncoder = JSONEncoder()) throws -> [Swift.String : Any]
}
extension UIKit.UIStackView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func withMargins(_ margins: UIKit.UIEdgeInsets) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func padLeft(_ left: CoreFoundation.CGFloat) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func padTop(_ top: CoreFoundation.CGFloat) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func padBottom(_ bottom: CoreFoundation.CGFloat) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func addSpacer() -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func customizeNew(backgroundColor: UIKit.UIColor = .clear, backgroundImage: UIKit.UIImageView? = nil, radiusSize: CoreFoundation.CGFloat = 0) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func padRight(_ right: CoreFoundation.CGFloat) -> UIKit.UIStackView
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func rounded()
  @_Concurrency.MainActor @preconcurrency public func shake(delegate: any QuartzCore.CAAnimationDelegate)
  @_Concurrency.MainActor @preconcurrency public func shadowForCard()
  @_Concurrency.MainActor @preconcurrency public func shadowForBottomCard()
  @_Concurrency.MainActor @preconcurrency public func addIconShadow()
  @_Concurrency.MainActor @preconcurrency public func roundWithShadowFrom(image: UIKit.UIImage)
  @_Concurrency.MainActor @preconcurrency public func roundCorners(_ corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func addSubview(_ subview: UIKit.UIView, constrainedTo anchorsView: UIKit.UIView, widthAnchorView: UIKit.UIView? = nil, multiplier: CoreFoundation.CGFloat = 1)
  @_Concurrency.MainActor @preconcurrency public func createTopBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor) -> QuartzCore.CALayer
  @_Concurrency.MainActor @preconcurrency public func createViewBackedTopBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func addTopBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func addViewBackedTopBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func addTopBorderWithHeightGradient(height: CoreFoundation.CGFloat, color: [CoreGraphics.CGColor])
  @_Concurrency.MainActor @preconcurrency public func createTopBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat) -> QuartzCore.CALayer
  @_Concurrency.MainActor @preconcurrency public func createViewBackedTopBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func addTopBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func addViewBackedTopBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func createRightBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor) -> QuartzCore.CALayer
  @_Concurrency.MainActor @preconcurrency public func createViewBackedRightBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func addRightBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func addViewBackedRightBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func createRightBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor, rightOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat) -> QuartzCore.CALayer
  @_Concurrency.MainActor @preconcurrency public func createViewBackedRightBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor, rightOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func addRightBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor, rightOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func addViewBackedRightBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor, rightOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func createBottomBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor) -> QuartzCore.CALayer
  @_Concurrency.MainActor @preconcurrency public func createViewBackedBottomBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func addBottomBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func addBottomBorderWithHeightGradient(height: CoreFoundation.CGFloat, color: [CoreGraphics.CGColor])
  @_Concurrency.MainActor @preconcurrency public func addViewBackedBottomBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func createBottomBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat) -> QuartzCore.CALayer
  @_Concurrency.MainActor @preconcurrency public func createViewBackedBottomBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func addBottomBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func addViewBackedBottomBorderWithHeight(height: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func createLeftBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor) -> QuartzCore.CALayer
  @_Concurrency.MainActor @preconcurrency public func createViewBackedLeftBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func addLeftBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func addViewBackedLeftBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func createLeftBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat) -> QuartzCore.CALayer
  @_Concurrency.MainActor @preconcurrency public func createViewBackedLeftBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func addLeftBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func addViewBackedLeftBorderWithWidth(width: CoreFoundation.CGFloat, color: UIKit.UIColor, leftOffset: CoreFoundation.CGFloat, topOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func createGradientLayer(frame: CoreFoundation.CGRect, currentColorSet: [CoreGraphics.CGColor], locations: [Foundation.NSNumber] = [0.0, 1], startPoint: CoreFoundation.CGPoint = CGPoint(x: 0.0, y: 0.5), endPoint: CoreFoundation.CGPoint = CGPoint(x: 1.0, y: 0.5))
}
public struct URLEncoder {
}
@_Concurrency.MainActor @preconcurrency public struct UnautherisedBannerView<Model> : SwiftUICore.View where Model : EffectiveProcessesSDK.UnautherisedBannerViewModelProtocol {
  @SwiftUICore.StateObject @_projectedValueProperty($model) @_Concurrency.MainActor @preconcurrency public var model: Model {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $model: SwiftUICore.ObservedObject<Model>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(model: Model)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21EffectiveProcessesSDK22UnautherisedBannerViewV4bodyQrvp", 0) __<Model>
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class UnautherisedBannerUIView<Model> : UIKit.UIView where Model : EffectiveProcessesSDK.UnautherisedBannerViewModelProtocol {
  @_Concurrency.MainActor @preconcurrency public init(model: Model)
  @objc deinit
}
public protocol UnautherisedBannerUsecase {
  func getOfferList(callback: @escaping (EffectiveProcessesSDK.Result<[EffectiveProcessesSDK.ProcessItemNew]>) -> Swift.Void)
  func autheticateAndGetOfferList(callback: @escaping (EffectiveProcessesSDK.Result<[EffectiveProcessesSDK.ProcessItemNew]>) -> Swift.Void)
}
public protocol UnautherisedBannerViewModelProtocol : Combine.ObservableObject {
  var items: [EffectiveProcessesSDK.ProcessItemNew] { get }
  var selectedPage: Swift.Int { get set }
  var isEmpty: Swift.Bool { get }
  func getData()
  func didSelectItem(processId: Swift.String)
}
public class UnautherisedBannerViewModel : EffectiveProcessesSDK.UnautherisedBannerViewModelProtocol {
  @Combine.Published @_projectedValueProperty($selectedPage) public var selectedPage: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedPage: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($items) public var items: [EffectiveProcessesSDK.ProcessItemNew] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $items: Combine.Published<[EffectiveProcessesSDK.ProcessItemNew]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init(items: [EffectiveProcessesSDK.ProcessItemNew])
  public func getData()
  public func didSelectItem(processId: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
open class UploadDocumentsModel : Foundation.ObservableObject {
  public init(documentErrorDriver: (any Swift.Error)?, documentLodedDriver: (Swift.String?, [EffectiveProcessesSDK.Document], Swift.String)?, documetLoadProgressDriver: Swift.Double?)
  @Combine.Published @_projectedValueProperty($documentErrorDriver) public var documentErrorDriver: (any Swift.Error)? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $documentErrorDriver: Combine.Published<(any Swift.Error)?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($documentLodedDriver) public var documentLodedDriver: (Swift.String?, [EffectiveProcessesSDK.Document], Swift.String)? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $documentLodedDriver: Combine.Published<(Swift.String?, [EffectiveProcessesSDK.Document], Swift.String)?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($documetLoadProgressDriver) public var documetLoadProgressDriver: Swift.Double? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $documetLoadProgressDriver: Combine.Published<Swift.Double?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class UploadDocumentsViewModel : ObjectiveC.NSObject, UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor @preconcurrency public var useCase: any EffectiveProcessesSDK.EPUseCase
  @_Concurrency.MainActor @preconcurrency @objc public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor @preconcurrency @objc public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
  @objc deinit
}
@propertyWrapper public struct UserDefault<T> {
  public init(key: Swift.String, defaultValue: T? = nil)
  public var wrappedValue: T? {
    get
    set
  }
}
public struct ValidationRecordResponse : Swift.Codable {
  public let status: Swift.Bool
  public let errorMessage: Swift.String
  public let recordDetails: [EffectiveProcessesSDK.RecordDetail]
  public let fields: [EffectiveProcessesSDK.Field]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct VideoBackgroundView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(videoNames: [Swift.String])
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: EffectiveProcessesSDK.VideoBackgroundView.Context) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: UIKit.UIView, context: EffectiveProcessesSDK.VideoBackgroundView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = UIKit.UIView
}
public protocol ViewControllerProvider {
  func viewController(for processInstance: EffectiveProcessesSDK.ProcessInstance) -> UIKit.UIViewController
}
public struct ViewControllerProvidiable : EffectiveProcessesSDK.ViewControllerProvider {
  public init(closure: @escaping (EffectiveProcessesSDK.ProcessInstance) -> UIKit.UIViewController)
  public func viewController(for processInstance: EffectiveProcessesSDK.ProcessInstance) -> UIKit.UIViewController
}
public protocol ViewDocumentProvider {
  @available(*, deprecated, message: "Use ViewDocumentProvider.fileViewV2")
  var fileView: (Foundation.URL?, EffectiveProcessesSDK.Document?) -> (EffectiveProcessesSDK.FilePreviewModel, UIKit.UIView) { get set }
  var fileViewV2: (Foundation.URL?, EffectiveProcessesSDK.Document?, _ isTapable: Swift.Bool) -> (EffectiveProcessesSDK.FilePreviewModel, UIKit.UIView) { get set }
}
public struct ViewProvidable : EffectiveProcessesSDK.ScreenProvider {
  public init(closure: @escaping (EffectiveProcessesSDK.ProcessInstance) -> UIKit.UIView)
  public func view(for processInstance: EffectiveProcessesSDK.ProcessInstance) -> UIKit.UIView
}
extension EffectiveProcessesSDK.BannerComponent : Swift.Sendable {}
extension EffectiveProcessesSDK.BannerComponentView : Swift.Sendable {}
extension EffectiveProcessesSDK.BannerStateView : Swift.Sendable {}
extension EffectiveProcessesSDK.BannerOneComponent : Swift.Sendable {}
extension EffectiveProcessesSDK.PageControlBanner : Swift.Sendable {}
extension EffectiveProcessesSDK.BannerCardView : Swift.Sendable {}
extension EffectiveProcessesSDK.BottomSheetView : Swift.Sendable {}
extension EffectiveProcessesSDK.FormAlignment : Swift.Equatable {}
extension EffectiveProcessesSDK.FormAlignment : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension EffectiveProcessesSDK.CachedAsyncImage : Swift.Sendable {}
@available(iOS 15.0, *)
extension EffectiveProcessesSDK.CheckboxBooleanField : Swift.Sendable {}
@available(iOS 15.0, *)
extension EffectiveProcessesSDK.CheckboxBooleanView : Swift.Sendable {}
@available(iOS 15.0, *)
extension EffectiveProcessesSDK.ConsentCheckboxField : Swift.Sendable {}
extension EffectiveProcessesSDK.IndicatorPosition : Swift.Equatable {}
extension EffectiveProcessesSDK.IndicatorPosition : Swift.Hashable {}
extension EffectiveProcessesSDK.IndicatorPosition : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.DesignTokenToggleStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.TextStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.SectionFormTextStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgMarginStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgPaddingStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgCornerRadiusStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgDividerStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgFieldIconStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgTooltipIconStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgActiveIndicatorStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgCardFrameModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgDesign : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgCornerRadiusModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgInputLabelStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgInputFieldBoxStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgInputFeedbackStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgAssistiveTextStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgDirectTextInputLabelStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgCalendarIconStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgTerminateButtonIconStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgNumericStepperLabelStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgNumericStepperValueDisplayStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgNumericStepperButtonStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgBorderView : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgSliderTrackStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgSliderProgressStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgSliderThumbStyle : Swift.Sendable {}
extension EffectiveProcessesSDK.EdNgSliderLabelStyleModifier : Swift.Sendable {}
extension EffectiveProcessesSDK.FieldType : Swift.Equatable {}
extension EffectiveProcessesSDK.FieldType : Swift.Hashable {}
extension EffectiveProcessesSDK.FieldType : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.HTTPMethod : Swift.Equatable {}
extension EffectiveProcessesSDK.HTTPMethod : Swift.Hashable {}
extension EffectiveProcessesSDK.HTTPMethod : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.HTTPNetworkError : Swift.Equatable {}
extension EffectiveProcessesSDK.HTTPNetworkError : Swift.Hashable {}
extension EffectiveProcessesSDK.HTTPNetworkError : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.HTTPNetworkRoute : Swift.Equatable {}
extension EffectiveProcessesSDK.HTTPNetworkRoute : Swift.Hashable {}
extension EffectiveProcessesSDK.HTTPNetworkRoute : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.LogLevel : Swift.Equatable {}
extension EffectiveProcessesSDK.LogLevel : Swift.Hashable {}
extension EffectiveProcessesSDK.LogLevel : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.MessagesView : Swift.Sendable {}
@available(iOS 15.0, *)
extension EffectiveProcessesSDK.MultiSelectCheckboxView : Swift.Sendable {}
extension EffectiveProcessesSDK.NonAnimatedUIKitModal : Swift.Sendable {}
extension EffectiveProcessesSDK.NumericStepperField : Swift.Sendable {}
extension EffectiveProcessesSDK.EDLayout : Swift.Equatable {}
extension EffectiveProcessesSDK.EDLayout : Swift.Hashable {}
extension EffectiveProcessesSDK.EDLayout : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.ActiveProcessInstance : Swift.Sendable {}
extension EffectiveProcessesSDK.ButtonType : Swift.Equatable {}
extension EffectiveProcessesSDK.ButtonType : Swift.Hashable {}
extension EffectiveProcessesSDK.ButtonType : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.ProcessItemNew.CodingKeys : Swift.Equatable {}
extension EffectiveProcessesSDK.ProcessItemNew.CodingKeys : Swift.Hashable {}
extension EffectiveProcessesSDK.ProcessItemNew.CodingKeys : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.TypeEnum : Swift.Equatable {}
extension EffectiveProcessesSDK.TypeEnum : Swift.Hashable {}
extension EffectiveProcessesSDK.TypeEnum : Swift.RawRepresentable {}
extension EffectiveProcessesSDK.ProductCardView : Swift.Sendable {}
extension EffectiveProcessesSDK.ProductSelectionListView : Swift.Sendable {}
@available(iOS 15.0, *)
extension EffectiveProcessesSDK.RadioButtonFkField : Swift.Sendable {}
extension EffectiveProcessesSDK.SSLPinningError : Swift.Equatable {}
extension EffectiveProcessesSDK.SSLPinningError : Swift.Hashable {}
@available(iOS 15.0, *)
extension EffectiveProcessesSDK.ToggleSwitchField : Swift.Sendable {}
extension EffectiveProcessesSDK.UnautherisedBannerView : Swift.Sendable {}
extension EffectiveProcessesSDK.UploadDocumentsViewModel : Swift.Sendable {}
extension EffectiveProcessesSDK.VideoBackgroundView : Swift.Sendable {}
